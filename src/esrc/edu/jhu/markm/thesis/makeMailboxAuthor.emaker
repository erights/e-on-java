#!/usr/bin/env rune

# Copyright 2005 Mark S. Miller, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.enable("lambda-args")

def makeMailboxAuthor(makeEProxyResolver) :any {
    def makeMailbox(var target) :Tuple[any,any] {
        def eProxyHandler {
            to unwrap() :any { return eProxyHandler }
            to handleOptSealedDispatch(brand) :any { return null }
            to handleSendAllOnly(verb, args) :void {
                E.sendOnly(target, verb, args)
            }
            to handleSendAll(verb, args) :any {
                return E.send(target, verb, args)
            }
            to handleResolution(newTarget) :void {}
            to reactToGC() :void {}
            to isFresh() :boolean { return true }
            to sameConnection(other) :boolean { return false }
            to mustBeDisposable() :void {}
        }
        def eProxyResolver := makeEProxyResolver(eProxyHandler, null)
        def eProxy := eProxyResolver.getProxy()
        def mailbox {
            to become(newTarget) :void { target := newTarget }
        }
        return [eProxy, mailbox]
    }
    return makeMailbox
}
