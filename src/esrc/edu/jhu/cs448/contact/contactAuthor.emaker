#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2004 Mark S. Miller, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# Based on a design by Christian Scheideler

def <contact> := <import:edu.jhu.cs448.contact.*>
def contactKitAuthor := <contact:contactKitAuthor>
def makeAnycaster := <contact:makeAnycaster>
def makeDeliverator := <contact:makeDeliverator>

def contactAuthor(entropy,
                  introducer,
                  makeSturdyRef,
                  rendezvousURIs :List[String]) :near {
    def contactKit :=
      contactKitAuthor(entropy, introducer, makeSturdyRef, rendezvousURIs)

    var status := "THAWED" # | "FREEZING" | "FROZEN" | "HALTED"

    def contact {

        /**
         * Defines the identity representing a new abstract service to be
         * contacted or provided.
         * <p>
         * Returns the provisionInfoStr -- the information needed to register
         * as a provider of the service.
         */
        to newContact() :String {
            return contactKit.newContact()
        }

        /**
         * From a provisionInfoStr (as would be returned by newContact), derive
         * the corresponding accessInfoStr -- the information needed to contact
         * and access some provider of the service.
         */
        to getAccessInfo(provisionInfoStr :String) :String {
            return contactKit.getAccessInfo(provisionInfoStr)
        }

        /**
         *
         */
        to makeAnycaster(accessInfoStr :String, statusObserver) :any {
            def accessor := contactKit.makeAccessor(accessInfoStr)
            return makeAnycaster(entropy, accessor, statusObserver)
        }

        /**
         *
         */
        to register(provisionInfoStr :String, face :near) :any {
            def deliverator := makeDeliverator([].asMap(), &status, face)
            return contactKit.provide(provisionInfoStr, deliverator)
        }

        /**
         *
         */
        to freeze() :void {
            throw("TODO: freeze() not yet implemented")
            status := "FREEZING"
        }

        /**
         *
         */
        to halt() :void {
            throw("TODO: halt() not yet implemented")
            status := "HALTED"
        }
    }
    return contact
}
