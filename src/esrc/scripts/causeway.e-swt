#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def traceline(str) :void { stderr.println(str) }

def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>

def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>

def Shell     := <swtType:widgets.Shell>
def PopupList := <swtType:custom.PopupList>
def Font      := <swtType:graphics.Font>

def sky__uriGetter := <import:com.skyhunter.*>
def logoURL := <resource:org/erights/e/icons/green-e-on-white-16.gif>

def uwidget__uriGetter := <unsafe:org.eclipse.swt.widgets.*>

def rezKit := <sky:swt.disposablesKitAuthor>(currentDisplay, traceline)


/**
 * By "frame" we mean a Shell with an icon.
 */
def makeFrame() :Shell {
    def frame := <widget:makeShell>(currentDisplay)
    frame.setImage(rezKit.makeImage(logoURL.openStream()))
    return frame
}
def makeModelessDialog(parent) :Shell {
    return <uwidget:Shell>(parent, SWT.getMODELESS() | SWT.getSHELL_TRIM())
}

def makePopup() :PopupList {
    return <custom:makePopupList>(currentDisplay.getActiveShell())
}

def makeFont(fontData) :Font {
    return rezKit.makeFont(fontData)
}

def makeFontDialog() :near {
    return <uwidget:FontDialog>(currentDisplay.getActiveShell(), 0)
}

def openner(shell :Shell) :vow {
    def dialog := <widget:makeFileDialog>(shell, SWT.getMULTI() | SWT.getOPEN())
    dialog.open()
    var optNames := dialog.getFileNames()
    def dir := <file>[dialog.getFilterPath()]
    if (optNames == null) { return [] }

    var paths := []
    for name in optNames {
        paths with= dir[name]
    }
    return paths
}

def activate(shell :Shell) :void {
    <widget:makeShell>.activate(shell)
}

def shutdown() :void {
    interp.exitAtTop()
}

def runtime := <unsafe:java.lang.makeRuntime>.getRuntime()
def tcr := <unsafe:org.erights.e.develop.trace.TraceController>

def <swttools> := <import:org.erights.e.ui.swt.*>
def abstractActionAuthor := <swttools:abstractActionAuthor>
def makeGCerAuthor := <swttools:makeGCerAuthor>

def abstractAction := abstractActionAuthor(rezKit)

def makeGCer := makeGCerAuthor(runtime, timer, abstractAction)

def makers := [].asMap().diverge()

makers.put("frame", makeFrame)
makers.put("popup", makePopup)
makers.put("modelessDialog", makeModelessDialog)
makers.put("fontDialog", makeFontDialog)
makers.put("font", makeFont)
makers.put("gcer", makeGCer)

def causewayEditorAuthor := <import:org.erights.e.tools.causeway.causewayEditorAuthor>


def makeCausewayEditor := causewayEditorAuthor(rezKit,
                                               abstractAction,
                                               makers.snapshot(),
                                               openner, <file>, <jar>,
                                               interp.getProps(),
                                               activate, shutdown,
                                               tcr,
                                               traceline)

def causewayEditor := makeCausewayEditor()

def traces := interp.getArgs()
def files := [].diverge()
for i in 0 ..! traces.size() {
    files[i] := <file>[traces[i]]
}

causewayEditor.open(files.snapshot())

interp.blockAtTop()
