#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def traceline(str) :void { stderr.println(str) }

# XXX why is this necessary? Is it a devrune config issue?
interp.setShowEStack(true)


def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>

def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>

def Shell     := <swtType:widgets.Shell>
def PopupList := <swtType:custom.PopupList>
def Font      := <swtType:graphics.Font>

def sky__uriGetter := <import:com.skyhunter.*>
def logoURL := <resource:org/erights/e/icons/green-e-on-white-16.gif>

def uwidget__uriGetter := <unsafe:org.eclipse.swt.widgets.*>

def rezKit := <sky:swt.disposablesKitAuthor>(currentDisplay, traceline)


/**
 * By "frame" we mean a Shell with an icon.
 */
def makeFrame() :Shell {
    def frame := <widget:makeShell>(currentDisplay)
    frame.setImage(rezKit.makeImage(logoURL.openStream()))
    return frame
}
def makeModelessDialog(parent) :Shell {
    return <uwidget:Shell>(parent, SWT.getMODELESS() | SWT.getSHELL_TRIM())
}

def makePopup() :PopupList {
    return <custom:makePopupList>(currentDisplay.getActiveShell())
}

def makeFont(fontData) :Font {
    return rezKit.makeFont(fontData)
}

def makeFontDialog() :near {
    return <uwidget:FontDialog>(currentDisplay.getActiveShell(), 0)
}

def openDir(shell :Shell, message :String) :near {
    def dialog := <widget:makeDirectoryDialog>(shell, SWT.getOPEN())
    if (message != "") {
        dialog.setMessage(message)
    }
    # The absolute path of the directory selected, or null.
    def abs := dialog.open()
    
    if (abs == null) { return null }
    
    return <file>[abs]
}

def openFile(shell :Shell) :List {
    def dialog := <widget:makeFileDialog>(shell, SWT.getMULTI() | SWT.getOPEN())
    dialog.open()
    var optNames := dialog.getFileNames()
    def dir := <file>[dialog.getFilterPath()]
    if (optNames == null) { return [] }
    
    var paths := []
    for name in optNames {
        paths with= dir[name]
    }
    return paths
}

def exportFile(shell :Shell,
               optFileName :nullOk[String],
               extensions :List[String]) :near {
    def dialog := <widget:makeFileDialog>(shell, SWT.getSAVE())
    if (optFileName != null) {
        dialog.setFileName(optFileName)
    }
    if (extensions.size() >= 1) {
        dialog.setFilterExtensions(extensions)
    }
    
    # The absolute path of the file selected, or null.
    def abs := dialog.open()
    
    if (abs == null) {
        return null
    } else {
        return <file>[abs]
    }
}

def activate(shell :Shell) :void {
    <widget:makeShell>.activate(shell)
}

def shutdown() :void {
    interp.continueAtTop()
}

def runtime := <unsafe:java.lang.makeRuntime>.getRuntime()
def tcr := <unsafe:org.erights.e.develop.trace.makeTraceController>

def <swttools> := <import:org.erights.e.ui.swt.*>
def abstractActionAuthor := <swttools:abstractActionAuthor>
def makeGCerAuthor := <swttools:makeGCerAuthor>

def abstractAction := abstractActionAuthor(rezKit)

def makeGCer := makeGCerAuthor(runtime, timer, abstractAction)

def makeCursor(style :int) :any {
    return <swt:graphics.makeCursor>(currentDisplay, style)
}

def openners := [].asMap().diverge()

openners.put("openFile", openFile)
openners.put("openDir", openDir)
openners.put("exportFile", exportFile)

def makers := [].asMap().diverge()

makers.put("frame", makeFrame)
makers.put("popup", makePopup)
makers.put("modelessDialog", makeModelessDialog)
makers.put("fontDialog", makeFontDialog)
makers.put("font", makeFont)
makers.put("gcer", makeGCer)
makers.put("cursor", makeCursor)

def props := interp.getProps()

def causewayEditorAuthor := <import:org.erights.e.tools.causeway.causewayEditorAuthor>


def makeCausewayEditor := causewayEditorAuthor(rezKit,
                                               abstractAction,
                                               makers.snapshot(),
                                               openners.snapshot(),
                                               <file>, <jar>,
                                               props,
                                               activate, shutdown,
                                               tcr,
                                               traceline)

# If invoked without a "src" property or arguments, causeway will wait
# for these to be provided interactively. Or, you can provide them on
# the command line. For example, when run from this scripts directory,
# the the following command line will launch causeway on the
# Waterken/Joe-E 2vat ajax-oriented purchase order example:
#
# devrune -Dsrc=test/causeway causeway.e-swt test/causeway/purchase_ajax.json

def srcRoot := if (props.maps("src")) {
    props["src"]
} else {
    ""
}

var traces := []
for arg in interp.getArgs() {
    traces with= <file>[arg]
}

def causewayEditor := makeCausewayEditor(srcRoot, traces)
causewayEditor.open()

interp.blockAtTop()
