#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def ConstMapMaker := <elib:tables.makeConstMap>
def HocusFocusMaker := <unsafe:org.erights.e.ui.awt.makeHocusFocus>

# For the meaning of various properties, see eprops-template.txt,
# eprops.txt, or org/erights/e/elang/syntax/syntax-props-default.txt

def props := [].asMap().diverge()

# 'false' means overwrite rather than complain
props.putAll(interp.getProps(), false)

def ehomeDir := <file>[props.fetch("e.home", fn{"."})]
def eVersionFile := ehomeDir["eVersion.txt"]
require(eVersionFile.exists(),
        fn{`Can't find ${eVersionFile.getPath()}`})
def eVersion := eVersionFile.getText().trim()
props["e.version"] := eVersion
println(`E $eVersion Installer...`)

def epropsFile := ehomeDir["eprops.txt"]
if (epropsFile.exists()) {
    def newProps := ConstMapMaker.fromPropertiesString(epropsFile.getText())
    def cpa := ehomeDir.getCanonicalPath()
    def cpb := <file>[newProps["e.home"]].getCanonicalPath()
    require(cpa == cpb,
            fn{`$cpa/eprops.txt says it should be at $cpb`})
    props.putAll(newProps, false)
}

def optIconImage := if (props.fetch("e.swingLnF", fn{}) == "none") {
    # If "none", then try to avoid doing anything that might crash the jvm
    # if we're headless. This may no longer be a concern with modern jvms.
    null
} else {
    def iconURL := <resource:org/erights/e/icons/green-e-on-white-16.gif>
    <swing:makeImageIcon>(iconURL).getImage()
}

def osname := interp.getProps().fetch("os.name", fn{})
if (osname != null && osname.startsWith("Windows")) {

    def setupWindows := <import:org.erights.e.install.win32.setupWindows>
    setupWindows(props,
                 interp,
                 stderr,
                 <file>,
                 ehomeDir,
                 makeCommand,
                 <awt>,
                 <swing>,
                 optIconImage,
                 HocusFocusMaker)

} else {
    # XXX This is stupid. We should do common install logic regardless.
    println(`Unrecognized OS ${E.toQuote(osname)}, probably Ctrl-C to exit.`)
    def readme := ehomeDir["README.txt"]
    if (readme.exists()) {
        println(`Then read the manual install instructions in "${
                readme.getPath()
            }".`)
    }
    interp.blockAtTop()
}
