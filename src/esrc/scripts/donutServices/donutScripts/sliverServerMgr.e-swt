#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2005 Mark S. Miller, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def Text := <type:org.eclipse.swt.widgets.Text>
def SWT := <swt:makeSWT>
def <widgets> := <swt:widgets.*>
def <dnd> := <swt:dnd.*>
def <swttools> := <import:org.erights.e.ui.swt.*>
def <sky> := <import:com.skyhunter.*>
def disposablesKit := <sky:swt.disposablesKitAuthor>(currentDisplay)

def dndKit := <swttools:dndKitAuthor>(<dnd>,
                                      currentDisplay,
                                      <file>,
                                      introducer,
                                      makeSturdyRef)
def RIGHT := SWT.getRIGHT()

def Slot := <type:org.erights.e.elib.slot.Slot>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>
def EverReactor := <type:org.erights.e.elib.slot.EverReactor>
def Throwable := <type:java.lang.Throwable>
def makeLamportSlot := <elib:slot.makeLamportSlot>
def whenever := <elib:slot.whenever>

def sliverServerMgr
def accountMgr

def ssmImage := disposablesKit.makeImage(
    <resource:org/erights/e/icons/cap-desk-on-white.gif>)
def piggyImage := disposablesKit.makeImage(
    <resource:org/erights/e/icons/piggy.jpg>)
def ssImage := disposablesKit.makeImage(
    <resource:org/erights/e/icons/carrot2.gif>)

def shell := <widgets:makeShell>(currentDisplay)
shell.setText("Sliver Server Manager")
shell.setImage(ssmImage)

def winDisposeListener {
    to widgetDisposed(event) :void {
        interp.exitAtTop()
    }
}
shell.addDisposeListener(winDisposeListener)

def WHITE  := disposablesKit.makeColor(255,255,255)
def PINK   := disposablesKit.makeColor(255,196,196)
def ALMOND := disposablesKit.makeColor(255,255,196)

def setColor(control, color) :void {
    if (control !~ _ :Text) {
        control.setBackground(color)
    }
    if (control.__respondsTo("getChildren", 0)) {
        for child in control.getChildren() {
            setColor(child, color)
        }
    }
}

def ssmTarget := <widgets:makeLabel>(shell, SWT.getSHADOW_OUT())
ssmTarget.setImage(ssmImage)
var ssmSet := false
def ssmSlot {
    to get() :any {
        return sliverServerMgr
    }
    to put(newSSM) :void {
        if (!ssmSet) {
            bind sliverServerMgr := newSSM
            ssmSet := true
        }
    }
    to isFinal() :boolean {
        return ssmSet
    }
}
dndKit.makeDragSource(ssmTarget, ssmSlot)
dndKit.makeDropTarget(ssmTarget, ssmSlot)
ssmTarget.setToolTipText(
    "Drop or right-click-paste a Sliver Server Manager to start")

def piggyTarget := <widgets:makeLabel>(shell, SWT.getSHADOW_OUT())
piggyTarget.setImage(piggyImage)
var piggySet := false
def piggySlot {
    to put(newAcctMgr) :void {
        if (!piggySet) {
            bind accountMgr := newAcctMgr
            piggySet := true
        }
    }
    to isFinal() :boolean {
        return piggySet
    }
}
dndKit.makeDropTarget(piggyTarget, piggySlot)
piggyTarget.setToolTipText("Drop or right-click-paste an account to start")


def sliverServer := sliverServerMgr <- getSliverServer()
def ssSource := <widgets:makeLabel>(shell, SWT.getSHADOW_OUT())
ssSource.setImage(ssImage)
dndKit.makeDragSource(ssSource, &sliverServer)
ssSource.setToolTipText("Drag or right-click-copy a Sliver Server")


Ref.whenBrokenOnly(sliverServerMgr, def reactor(_) :void {
    setColor(shell, PINK)
})
when (accountMgr,
      sliverServerMgr <- bindAccountMgr(accountMgr)) -> d2(_,_) :void {
    setColor(shell, ALMOND)
} catch ex {
    throw(ex)
}

def makeControl(arg) :any {
    return swtGrid__quasiParser.makeControl(shell, arg)
}

swtGrid`$shell:
        $ssmTarget     ${"Sliver Server Manager"}.X
        $piggyTarget   ${"To earn into this account..."}.X
        ${""}.X.Y
        $ssSource      ${"...make this available to customers"}.X`

if (interp.getProps().fetch("e.osdir", fn{}) == "linux-motif") {
    println("skipping font adjustment on linux-motif to avoid bug")
} else {
    def setFont(control, font) :void {
        control.setFont(font)
        if (control.__respondsTo("getChildren", 0)) {
            for child in control.getChildren() {
                setFont(child, font)
            }
        }
    }
    def fontData := shell.getFont().getFontData()[0]
    fontData.setHeight(fontData.getHeight() + 4)
    def font := disposablesKit.makeFont(fontData)
    setFont(shell, font)
}

setColor(shell, PINK)

shell.pack(true)
shell.open()
introducer.onTheAir()
interp.blockAtTop()

# rune(["~/e/src/esrc/scripts/donutServices/donutScripts" +
#       "/sliverServerMgr.e-swt"])
