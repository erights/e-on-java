#!/usr/bin/env rune

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("anon-lambda")
pragma.enable("lambda-args")
def __when := <elang:control.__when>

def JPanel__quasiParser := <import:org.erights.ex.swing.JPanel__quasiParser>

def capEditCapletAuthor {
    to getRequestedCaps() :near {
        "<requests>
        <pet>
        <name>CapEdit</name>
        <suffix>txt</suffix>
        <icon>data/capEdit.gif</icon>
        </pet>
        </requests>"
    }
    to run(powerbox) :near {
        def <awt> := <import:java.awt.*>
        def <swing> := <import:javax.swing.*>
        def fileRcvrs := powerbox.optCap(powerbox.getINITIAL_DOC_RCVRS())
        if (fileRcvrs.size() == 0) {
            capEditCapletAuthor (powerbox, <awt>, <swing>, null)
        } else {
            for each in fileRcvrs {
                capEditCapletAuthor (powerbox, <awt>, <swing>, each)
            }
        }
    }
    to run(powerbox, <awt>, <swing>, optFileRcvr) :void {
        def traceline := powerbox.optCap(powerbox.getTRACELN())
        traceline("made it to testCapEdit traceline")
        def frameMaker := powerbox.optCap(powerbox.getFRAME_MAKER())
        def awtDropTarget := powerbox.optCap(powerbox.getDROP_TARGET())
        def uiTools := <import:com.skyhunter.ex.swing.uiToolsAuthor>(<awt>, <swing>)
        def dialogVowMaker := <import:com.skyhunter.ex.swing.dialogVowMakerAuthor> (
            <awt>, <swing>, frameMaker)

        def fileDummy {
            to getName() :String {"Untitled"}
            to canWrite() :boolean {false}
            to getText() :String {""}
            match [verb, args] {}
        }
        def fileRcvr := __when (optFileRcvr) -> {
            if (optFileRcvr != null) {optFileRcvr} else {fileDummy}
        }

        def reactToFilesDrop(files) :void {
            for i in 0..(files.size() - 1) {
                capEditCapletAuthor (powerbox, <awt>, <swing>, files[i])
            }
        }

        def prepDrop(textPane) :void {
            def DataFlavor := <awt:datatransfer.makeDataFlavor>
            def setupDrop := <import:com.skyhunter.e.awt.dnd.setupDropFuncAuthor> (
                awtDropTarget, traceline)
            def reactToFileRcvrsDrop(fileRcvrs) :void {
                traceline("caplet received drop of fileRcvrs")
                reactToFilesDrop(fileRcvrs)
            }
            setupDrop(textPane, [DataFlavor.getJavaFileListFlavor()
                                 => reactToFilesDrop,
                                 DataFlavor(DataFlavor.getJavaJVMLocalObjectMimeType() +
                                              "; class=java.awt.dnd.DropTargetEvent")
                                 => reactToFileRcvrsDrop])
        }

        def capEdit
        # XXX Fix this to open zero files
        def myTextVow := fileRcvr <- getText()
        # XXX Funky var myText, how should this be done?
        var myText := myTextVow
        def canWriteVow := fileRcvr <- canWrite()
        def myFileNameVow := fileRcvr <- getName()
        var closingInProcess := false
        def windowListener {
            to windowClosing(event) :void {capEdit.windowClosing()}
            match [verb, args] {}
        }
        def mainFrame := frameMaker()
        def mainPane := mainFrame.getContentPane()
        mainFrame.setDefaultCloseOperation(<swing:makeWindowConstants>.getDO_NOTHING_ON_CLOSE())
        mainFrame.addWindowListener(windowListener)
        def border := <awt:makeBorderLayout>()
        mainPane.setLayout(border)

        def saveAction() :void {capEdit.save()}
        def saveURL := <resource:com/skyhunter/e/icons/save.gif>
        def saveButton := uiTools.newToolButton(<swing:makeImageIcon>(saveURL).getImage(), "Save", saveAction)

        def openAction() :void {
            def fileRcvrsVow := powerbox.requestFileRcvrsVow(
                true, "Select Files To Edit", "To Edit For You", "~/Desktop", null)
            __when (fileRcvrsVow) -> {
                reactToFilesDrop(fileRcvrsVow)
            } catch prob {
                traceline(`prob opening files: $prob`)
            }
        }
        def openURL := <resource:com/skyhunter/e/icons/fileOpen.gif>
        def openButton := uiTools.newToolButton( <swing:makeImageIcon>(openURL).getImage(), "Open File", openAction)

        def toolSpacer := <swing:makeJLabel>(" ")
        def textPane := <swing:makeJTextArea>()
        textPane.setLineWrap(true)
        textPane.setWrapStyleWord(true)
        textPane.setTabSize(4)
        prepDrop(textPane)

        def scrollingTextPane := <swing:makeJScrollPane>(
            <swing:makeScrollPaneConstants>.getVERTICAL_SCROLLBAR_ALWAYS(),
            <swing:makeScrollPaneConstants>.getHORIZONTAL_SCROLLBAR_NEVER())
        scrollingTextPane.getViewport().add(textPane)
        def realPane := JPanel`$saveButton           $openButton    $toolSpacer.X
                               $scrollingTextPane.Y  >              >`
        #mainPane add(saveButton,"North")
        #mainPane add(scrollingTextPane, "Center")
        realPane.setPreferredSize(<awt:makeDimension>(300, 300))
        mainPane.add(realPane, "Center")

        __when (myTextVow, canWriteVow, myFileNameVow) -> {
            mainFrame.setTitle(myFileNameVow)
            saveButton.setEnabled(canWriteVow)
            textPane.setText(myText)
            # reset text from pane to defeat annoying
            # mismatch on final cr/lf problem
            myText := textPane.getText()
            mainFrame.pack()
            mainFrame.setSize(600,400)
            mainFrame.show()
        } catch err {
            dialogVowMaker("No File",
                           "<html>Couldn't get file. Error:<p>"+err,
                           null,
                           ["OK"])
        }

        var undisposed := true
        def disposeOnce() :void {
            if (undisposed) {
                mainFrame.dispose()
                undisposed := false
            }
        }
        def bind capEdit {
            to save() :void {
                myText := textPane.getText()
                def setVow := fileRcvr  <- setText(myText)
                when (setVow) -> done(textSet) :void {
                    #do nothing
                } catch err {
                    dialogVowMaker(
                        "Save Problem",
                        "<html>Save may have failed for:<p><b> " + myFileNameVow + " </b><p>because:<p> " + err,
                        null, ["OK"])
                }
            }
            to windowClosing() :void {
                traceline("Window closing")
                if (! closingInProcess) {
                    closingInProcess := true
                    def finalText := textPane.getText()
                    if (finalText == myText) {
                        disposeOnce()
                    } else {
                        def saveDecision :=
                          dialogVowMaker("Modified File " + myFileNameVow,
                                         "Save Before Exiting?",
                                         null,
                                         ["Save", "Exit", "Cancel"])
                        when (saveDecision <- getClickedButton()) ->
                          done(var answer) :void {

                            closingInProcess := false
                            if (answer == null) {
                                answer := "Cancel"
                            }
                            if (answer =="Save") {
                                traceline("into save")
                                capEdit.save()
                                disposeOnce()
                            } else if (answer == "Exit") {
                                myText := finalText
                                disposeOnce()
                            }
                        } catch err{}
                    }
                }
            }
        }
    }
}



