#!/usr/bin/env rune

# Copyright 2006 Hewlett-Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("lambda-args")



def makeOrcCompiler(orcShell) {
    def orcCompiler {
        to run(orcVarTerm,orcFnTerm) {
            
        }
        to run(orcTerm) {
            switch (orcTerm) {
                match term`expr(@exprTs*)` {
                    def exprs := ::"for" (exprTs) map eT { orcCompiler(eT) }
                    return termE`$exprs`
                }
                match term`call(@leftT,[@argTs*])` {
                    def left := orcCompiler(leftT)
                    def args := ::"for" (argTs) map argT { orcCompiler(argT) }
                    return termE`orc.call($left, [$args])`
                }
                match term`par(@leftT,@rightT)` {
                    def left := orcCompiler(leftT)
                    def right := orcCompiler(rightT)
                    return termE`orc.par($left, $right)`
                }
                match term`pipe(@leftT,@varT,@rightFnT)` {
                    def left := orcCompiler(leftT)
                    def rightFn := orcCompiler(varT,rightFnT)
                    return termE`orc.pipe($left, $rightFn)`
                }
                match term`where(@leftFnT,@varT,@rightT)` {
                    def leftFn := orcCompiler(varT,leftFnT)
                    def right := orcCompiler(rightT)
                    return term`orc.where($leftFn, $right)`
                }
                match term`.DollarHole.(.int.@num)` {
                    
                }
            }
        }
    }
    return orcCompiler
}
