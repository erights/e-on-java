#!/usr/bin/env rune

# Copyright 2006 Hewlett Packard, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

/**
 * Marks my private proxies for invoking objects served by
 * other Who/Deliverator pairs. My proxies should never escape.
 * No one else can mark an object as being one of my proxies,
 * i.e., I must keep the ProxyStamp closely held.
 */
interface Proxy guards ProxyStamp {
    to getWho() :dist[Who]
    to getDeliverator() :dist[Deliverator]
}

def makeProxy(myClientPolicy,
              who :dist[Who],
              deliverator :dist[Deliverator]) :Proxy {
    def proxy implements Proxy {
        to getWho()         { return who }
        to getDeliverator() { return deliverator }
        
        match [verb, args] {
            var sealedArgs := []
            for arg in args {
                if (arg =~ _ :Proxy) {
                    def argWho := arg.getWho()
                    def argD := arg.getDeliverator()
                    def [sealedArg, sealedArgRes] := Ref.promise()
                    def box := argWho <- sealIntro("auto",
                                                   who,
                                                   sealedArgRes)
                    argD <- deliver(box)
                    sealedArgs with= sealedArg
                } else {
                    def safeArg := myClientPolicy.wrap(arg)
                    def sealedArg := who <- sealArg(safeArg)
                    sealedArgs with= sealedArg
                }
            }
            def [result,resolver] := Ref.promise()
            def box := who <- sealRequest(verb,
                                          sealedArgs,
                                          resolver)
            deliverator <- deliver(box)
            result
        }
    }
    return proxy
}
