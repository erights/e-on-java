#!/usr/bin/env rune

# Copyright 2006 Hewlett Packard, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def Opaque := any # assumed to be some else's Box.
def dist := rcvr # A possibly-remote reference.
def Resolver := <type:org.erights.e.elib.ref.Resolver>

/**
 * A Who is an identity which can serve as a responsible party.
 * <p>
 * All the methods returning an Opaque should actually return an
 * object this responsible party can unlock to obtain the
 * original message arguments. However, none of these messages
 * by themselves require the responsible party to react.
 * <p>
 * Between processes or machines speaking to each other using a
 * cryptographic capability protocol, a Who could be implemented as
 * a pass-by-copy object carrying a moniker and a public encryption
 * key. All the methods returning Opaque above would just serialize its
 * arguments and encrypt the results. The Opaque object resturned would
 * just hold this cyphertext.
 * <p>
 * Alternatively, simple/makeWho.emaker shows how it can be implemented
 * trivially using sealer/unsealer pairs.
 */
interface Who {

    /**
     * The "nickname" from Zooko's triangle, i.e., a name
     * which the responsible party suggests it be called, with
     * no claim or expectation of uniqueness or stability. Only
     * useful when some of the participants in this protocol are
     * humans or their agents.
     */
    to getMoniker() :String

    /**
     * Used for each argument which will be included in a
     * request.
     */
    to sealArg(arg :any) :Opaque

    /**
     * Presumably, the verb/args are intended to be delivered to
     * some object managed by this Who, at which time the
     * resolver will be resolved to the outcome. (In some cap
     * systems, one might use a "resume key" instead of a resolver.)
     */
    to sealRequest(verb :String,
                   sealedArgs :List[Opaque],
                   resolver :dist[Resolver]) :Opaque

    /**
     * When sent towards an object C managed by this Carol,
     * where the requestor is Alice and other is Bob, this
     * requests Carol to resolve the resolver to an Opaque
     * sealed by Bob, which Bob can unseal to obtain his own
     * separate ability to use C.
     */
    to sealIntro(why :String,
                 other :dist[Who],
                 resolver :dist[Resolver]) :Opaque
}
