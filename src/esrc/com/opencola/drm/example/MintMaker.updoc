#!/usr/bin/env rune

Copyright 2002 Combex, Inc. under the terms of the MIT X license
found at http://www.opensource.org/licenses/mit-license.html ..................

? pragma.syntax("0.8")
? def BrandMaker := <elib:sealing.makeBrand>
# value: <makeBrand>

? interp.getProps()["e.version"]
# value: "0.8.??"

? def MintMaker(name) :any {
>     def [sealer,unsealer] := BrandMaker.pair(name)
>     def issuer{
>         to __printOn(out :TextWriter) :void { out.print(`<$name's issuer>`) }
>         to makePurse() :any {
>             mint.makePurse(0)
>         }
>         to sturdyVouch(other) :any {
>         #  can't be done until persistence is added
>             throw("method sturdyVouch() not yet implemented")
>         }
>         to vouch(other) :any {
>             unsealer.unseal(other.getSealed())
>         }
>      }
>     def mint {
>         to __printOn(out :TextWriter) :void { out.print(`<$name's mint>`) }
>         to makeAssay(quantity :(any >= 0)) :any {
>
>             def assay {
>                 to __printOn(out :TextWriter) :void {
>                     out.print(`<Assay: $name>`)
>                 }
>                 to getQuantity()    :any { quantity }
>                 to getSealed()      :any { sealer.seal(assay)}
>                 to op__cmp(other) :any {
>                     quantity.op__cmp(other.getQuantity())
>                 }
>                 to transfer(var src,var dest) :void {
>                     src := issuer.vouch(src)
>                     dest := issuer.vouch(dest)
>                     unsealer.unseal(src.getDecr())(quantity)
>                     unsealer.unseal(dest.getIncr())(quantity)
>                 }
>                 to getIssuer() :any { issuer }
>             }
>         }
>         to makePurse(var quantity :(any >= 0)) :any {
>             def Decr(amount :(0..quantity)) :void { quantity -= amount }
>             def Incr(amount :(any >= 0))    :void { quantity += amount }
>             def Purse {
>                 to getPurseValue() :any { quantity }
>                 to getSealed()     :any { sealer.seal(Purse)}
>                 to getIssuer()     :any { issuer }
>                 to getAssay()      :any { mint.makeAssay(quantity) }
>                 to depositAll(src) :any {
>                     def assay := issuer.vouch(src.getAssay())
>                     assay.transfer(src,Purse)
>                     assay
>                 }
>                 to getIncr() :any { sealer.seal(Incr) }
>                 to getDecr() :any { sealer.seal(Decr) }
>             }
>         }
>     }
> }
