#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def layout__uriGetter := <swt:layout.*>
def SWT := <swt:makeSWT>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def makeTextView := <import:org.erights.e.tools.causeway.makeTextView>

def getTextSpan(file, first :int, last :int) :String {
    if (!(file.__respondsTo("exists",0)) || file.exists()) {
        var span :String := ""
        def text := file.getText()
        def lines := text.split("\n")
        
        if (first <= lines.size()) {
            def lastLine
            if (first == last || last > lines.size()) {
                bind lastLine := lines.size()
            } else {
                bind lastLine := last -1
            }
            
            def n := lastLine - first +1
            
            for i in first ..! first + n {
                
                span += lines[i -1]
                span += "\n"
            }
        }
        return span
        
    } else {
        `*** "${file.getPath()}" not found ***`
    }
}

def getText(file) :String {
    if (!(file.__respondsTo("exists",0)) || file.exists()) {
        file.getText()
    } else {
        `*** "${file.getPath()}" not found ***`
    }
}

def debugViewAuthor(<file>, <jar>, makers, traceline) :near {
    
    def makeDebugView(swtParent, palette, 
                      abstractAction, selectionModel) :near {
        
        def swtDebugView := <widget:makeComposite>(swtParent, 0)
        def swtTextView := <custom:makeStyledText>(swtDebugView,
                                                   SWT.getH_SCROLL() | SWT.getV_SCROLL())
        
        def getTextActionTargets
        def textView := makeTextView(swtDebugView, palette,
                                     abstractAction, getTextActionTargets)

        def dpp := palette.makeDebugViewPalette()
        swtTextView.setForeground(dpp.getFg())
        swtTextView.setBackground(dpp.getBg())
        swtTextView.setFont(dpp.getFont())
        
        swtTextView.setWordWrap(false)
        swtTextView.setEditable(false)
        swtTextView.setText("")
        
        /**
         * Returns either a java.io.File or a java.net.URL
         */
        def getFile(pathname) :any {
            switch (pathname) {
                match `file:@body` {
                    return <file>[body]
                }
                match `jar:@body` {
                    return <jar>[body]
                }
                match _ {
                    return <file>[pathname]
                }
            }
        }
                
        def selectionObserver {
            to placeSelected(optPlace) :void {
                if (null != optPlace) {
                    def element := optPlace.getElement()
                    def logFiles := element.getLogFiles()
                    swtTextView.append("\n")
                    def sos := swtTextView.getCharCount()
                    if (element.isNode()) {
                        swtTextView.append(">>>>> Log entries for node:")
                    } else {
                        swtTextView.append(">>>>> Log entries for edge:")
                    }
                    def eos := swtTextView.getCharCount()
                    swtTextView.append("\n")
                    
                    for span in logFiles {
                        def pathname := span.getUrl()
                        def startLine := span.getStartLine()
                        def endLine := span.getEndLine()
                        
                        #traceline(`span pathname: $pathname start: $startLine end: $endLine`)
                        
                        def file := getFile(pathname)
                        
                        def textSpan := getTextSpan(file, startLine, endLine)
                        
                        swtTextView.append(textSpan)
                        swtTextView.append("\n")
                    }
                    # set selection scrolls the content into view
                    swtTextView.setSelection(sos, swtTextView.getCharCount())
                    # just highlight the horizontal break
                    swtTextView.setSelection(sos, eos)
                }
            }
        }
        selectionModel.addObserver(selectionObserver)
        
        bind getTextActionTargets(action :String) :List {
            if (action == "doIncreaseFontSize" ||
                  action == "doDecreaseFontSize") {
                return [swtTextView]
            }
            return null
        }

        def debugView {
                        
            to open() :void {}
            
            to layout() :void {

                textView.layout()
                
                swtGrid`${swtDebugView}:
                        ${swtTextView}.X.Y`
                
                palette.zeroMargins(swtDebugView.getLayout())                
            }
        }
        return debugView
    }
}
