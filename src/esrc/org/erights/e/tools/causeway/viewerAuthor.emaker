#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>
def File := <type:java.io.File>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def stackWalkerAuthor :=
  <import:org.erights.e.tools.causeway.stackWalkerAuthor>

def treePaneAuthor :=
  <import:org.erights.e.tools.causeway.treePaneAuthor>

def makePOGroup :=
  <import:org.erights.e.tools.causeway.makePOGroup>

#def debugPaneAuthor :=
#  <import:org.erights.e.tools.causeway.debugPaneAuthor>

def getDisplayName(vatName) :String {
    
    if (vatName =~ `<Vat @vn>`) {
        if (vn =~ `@_/-/@name`) {
            return name
        } else {
            return vn
        }
    }
    
    # find most specific folder name
    def parts := vatName.split("/")
    var i := parts.size() -1
    while (i >= 0) {
        def part := parts[i]
        if (part != "") { return part }
        i -= 1
    }
    return vatName
}

def makeVatMap(vats, palette, traceline) :near {
    
    def attributes := [].asMap().diverge()
    
    for i in 0 ..! vats.size() {
        def name := getDisplayName(vats[i])
        def color := palette.getVatColor(i)
        attributes.put([vats[i]],[name, color], true)
    }
    def vatMap {
        to fetchDisplayAttributes(vat) :near {
            return attributes.fetch([vat], fn{
                [vat, palette.getDefaultVatColor()]
            })
        }
    }
    return vatMap
}

def makeFolderGroup(folder, palette, traceline) :near {
    
    def tabKeeper := [].diverge()
    
    def folderGroup {
        
        to add(tabbedPane, label) :void {
            def tab := <widget:makeTabItem>(folder, 0)
            
            tab.setControl(tabbedPane.getPane())
            tab.setText(label)
            tabKeeper.push([tab, tabbedPane])
        }
        
        to layout() :void {
            for [_, tabbedPane] in tabKeeper {
                tabbedPane.layout()
            }
        }
        
        to open() :void {}
    }
    return folderGroup
}

/**
 */
def viewerAuthor(<file>, <jar>, makers, shell, tcr, traceline) :near {
    
    def makeViewer(parent, palette) :near {
        
        # model is an unresolved promise until setModel binds it
        def model
        
        # messageGraph is an unresolved promise until setModel binds it
        def messageGraph
        
        def topToBottom := <custom:makeSashForm>(parent, SWT.getVERTICAL())
        def sideToSide := <custom:makeSashForm>(topToBottom,
                                                SWT.getHORIZONTAL())
        
        def fp := palette.makeFolderPalette()
        
        # top-left
        def pogFolder := <widget:makeTabFolder>(sideToSide, 0)
        pogFolder.setForeground(fp.getFg())
        pogFolder.setBackground(fp.getBg())
        pogFolder.setFont(fp.getFont())
        
        # top-middle
        def treeFolder := <widget:makeTabFolder>(sideToSide, 0)
        treeFolder.setForeground(fp.getFg())
        treeFolder.setBackground(fp.getBg())
        treeFolder.setFont(fp.getFont())
        def treeFolderGroup := makeFolderGroup(treeFolder, palette, traceline)
        def makeTreePane := treePaneAuthor(traceline)
        
        # top-right
        def debugFolder := <widget:makeTabFolder>(sideToSide, 0)
        debugFolder.setForeground(fp.getFg())
        debugFolder.setBackground(fp.getBg())
        debugFolder.setFont(fp.getFont())
        def debugFolderGroup := makeFolderGroup(debugFolder,
                                                palette,
                                                traceline)
        #def makeDebugPane := debugPaneAuthor(<file>, <jar>, makers, traceline)
        
        # bottom
        def stackPane := <widget:makeComposite>(topToBottom, 0)
        stackPane.setForeground(fp.getFg())
        stackPane.setBackground(fp.getBg())
        stackPane.setFont(fp.getFont())
        def makeStackWalker := stackWalkerAuthor(<file>,
                                                 <jar>,
                                                 makers,
                                                 traceline)
        
        topToBottom.setWeights([50, 50])
        sideToSide.setWeights([40, 35, 25])
        
        def viewer {
            
            to getTopLevelPane() :near { return topToBottom }
            
            to open() :void {}
            
            to layout() :void {
                sideToSide.layout()
                topToBottom.layout()
            }
            
            to setModel(viewerModel, selectionModel) :void {
                bind model := viewerModel
                bind messageGraph := model.getTop()
                
                def vatSet := model.getVatSet()
                def vatMap := makeVatMap(vatSet, palette, traceline)
                
                #def debugPane := makeDebugPane(debugFolder,
                #                               palette, selectionModel)
                #debugFolderGroup.add(debugPane, debugPane.getTabLabel())
                #debugFolderGroup.layout()
                
                stackPane.setVisible(false)
                def stackWalker := makeStackWalker(topToBottom, palette,
                                                   vatMap, selectionModel)
                stackWalker.layout()
                
                def treePane := makeTreePane(treeFolder, palette, vatMap,
                                             messageGraph, selectionModel,
                                             stackWalker)
                treeFolderGroup.add(treePane, treePane.getTabLabel())
                treeFolderGroup.layout()
                
                # Map [VatName, List[EventArc]]
                def pogModel := [].asMap().diverge()
                for i in 0 ..! vatSet.size() {
                    def poList := model.getOrdered(vatSet[i])
                    if (poList != []) {
                        pogModel[vatSet[i]] := poList
                    }
                }
                def pogView := makePOGroup(pogFolder, palette, vatMap,
                                           pogModel.snapshot(),
                                           selectionModel, stackWalker)
                pogView.layout()
            }
            
            to exportModelToDotFile(dotFile :File) :void {
                if (Ref.isNear(model)) {
                    model.exportToDotFile(dotFile)
                } else {
                    # do something
                }
            }
        }
        return viewer
    }
}

