#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2008 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>

def File := <type:java.io.File>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def stackWalkerAuthor :=
  <import:org.erights.e.tools.causeway.stackWalkerAuthor>

def makeMessageOrderView :=
  <import:org.erights.e.tools.causeway.makeMessageOrderView>

def makeProcessOrderView :=
  <import:org.erights.e.tools.causeway.makeProcessOrderView>

#def makeDebugView :=
#<import:org.erights.e.tools.causeway.makeDebugView>

def getDisplayName(vatName) :String {
    
    if (vatName =~ `<Vat @vn>`) {
        if (vn =~ `@_/-/@name`) {
            return name
        } else {
            return vn
        }
    }
    
    # find most specific folder name
    def parts := vatName.split("/")
    var i := parts.size() -1
    while (i >= 0) {
        def part := parts[i]
        if (part != "") { return part }
        i -= 1
    }
    return vatName
}

def makeVatMap(vats, palette, traceline) :near {
    
    def attributes := [].asMap().diverge()
    
    for i in 0 ..! vats.size() {
        def name := getDisplayName(vats[i])
        def color := palette.getVatColor(i)
        attributes.put([vats[i]],[name, color], true)
    }
    def vatMap {
        to fetchDisplayAttributes(vat) :near {
            return attributes.fetch([vat], fn{
                [vat, palette.getDefaultVatColor()]
            })
        }
    }
    return vatMap
}

/**
 */
def viewerAuthor(<file>, <jar>, makers,
                 shell, abstractAction, tcr, traceline) :near {
    
    def makeStackWalker := stackWalkerAuthor(<file>,
                                             <jar>,
                                             makers,
                                             traceline)
    
    def makeViewer(swtParent, palette, viewerModel, selectionModel) :near {
        
        def swtViewerView := <widget:makeComposite>(swtParent, 0)
        
        def swtTopToBottom := <custom:makeSashForm>(swtViewerView,
                                                    SWT.getVERTICAL())
        def swtSideToSide := <custom:makeSashForm>(swtTopToBottom,
                                                   SWT.getHORIZONTAL())
        
        def model := viewerModel
        def messageGraph := model.getTop()
        
        def vatSet := model.getVatSet()
        def vatMap := makeVatMap(vatSet, palette, traceline)
        
        # bottom
        def stackWalker := makeStackWalker(swtTopToBottom, palette,
                                           abstractAction,
                                           selectionModel, vatMap)
        
        # top-left
        # Map [VatName, List[EventArc]]
        def poModel := [].asMap().diverge()
        for i in 0 ..! vatSet.size() {
            def poList := model.getOrdered(vatSet[i])
            if (poList != []) {
                poModel[vatSet[i]] := poList
            }
        }
        def pov := makeProcessOrderView(swtSideToSide, palette,
                                        abstractAction,
                                        poModel.snapshot(), selectionModel,
                                        vatMap, stackWalker)
        
        # top-middle
        def mov := makeMessageOrderView(swtSideToSide, palette,
                                        abstractAction,
                                        messageGraph, selectionModel,
                                        vatMap, stackWalker)
        
        # top-right
        #def dv := makeDebugView(swtSideToSide, palette)
        
        swtTopToBottom.setWeights([50, 50])
        #swtSideToSide.setWeights([40, 35, 25])
        swtSideToSide.setWeights([40, 60])
        
        stackWalker.layout()
        pov.layout()
        mov.layout()
        
        def viewer {
            
            to getTopLevelPane() :near { return swtViewerView }
            
            to open() :void {}
            
            to layout() :void {
                
                def ssKids := swtSideToSide.getChildren()
                for ssKid in ssKids {
                    ssKid.layout()
                }
                def tbKids := swtTopToBottom.getChildren()
                for tbKid in tbKids {
                    tbKid.layout()
                }
                
                swtGrid`${viewer.getTopLevelPane()}:
                        ${swtTopToBottom}.X.Y`
            }
            
            to exportModelToDotFile(dotFile :File) :void {
                if (Ref.isNear(model)) {
                    model.exportToDotFile(dotFile, palette,
                                          vatMap, stackWalker)
                } else {
                    # do something
                }
            }
        }
        return viewer
    }
    return makeViewer
}

