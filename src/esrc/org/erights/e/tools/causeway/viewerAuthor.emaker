#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2008 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>
def makeConstMap := <elib:tables.makeConstMap>

def File := <type:java.io.File>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def stackWalkerAuthor :=
  <import:org.erights.e.tools.causeway.stackWalkerAuthor>

def debugViewAuthor :=
  <import:org.erights.e.tools.causeway.debugPaneAuthor>


def makeMessageOrderView :=
  <import:org.erights.e.tools.causeway.makeMessageOrderView>

def makeProcessOrderView :=
  <import:org.erights.e.tools.causeway.makeProcessOrderView>

def makeFilterOptionsView :=
  <import:org.erights.e.tools.causeway.makeFilterOptionsView>



def getDisplayName(vatName) :String {
    
    if (vatName =~ `<Vat @vn>`) {
        if (vn =~ `@_/-/@name`) {
            return name
        } else {
            return vn
        }
    }
    
    # find most specific folder name
    def parts := vatName.split("/")
    var i := parts.size() -1
    while (i >= 0) {
        def part := parts[i]
        if (part != "") { return part }
        i -= 1
    }
    return vatName
}

def makeVatMap(vats, palette, traceline) :near {
    
    def attributes := [].asMap().diverge()
    
    for i in 0 ..! vats.size() {
        def name := getDisplayName(vats[i])
        def color := palette.getVatColor(i)
        attributes.put([vats[i]],[name, color], true)
    }
    def vatMap {
        to fetchDisplayAttributes(vat) :near {
            return attributes.fetch([vat], fn{
                [vat, palette.getDefaultVatColor()]
            })
        }
    }
    return vatMap
}

/**
 */
def viewerAuthor(rootDirName :String,
                 <file>, <jar>, props,
                 makers, shell, abstractAction, tcr, traceline) :near {
    
    def makeStackWalker := stackWalkerAuthor(rootDirName,
                                             <file>,
                                             <jar>,
                                             makers,
                                             traceline)
    
    def optMakeDebugView := if (makeConstMap.testProp(props,
                                                      "causeway_debug")) {
        debugViewAuthor(<file>,
                        <jar>,
                        makers,
                        traceline)
    } else {
        null
    }
    
    def makeViewer(swtParent, palette, viewerModel, selectionModel) :near {
        
        def swtViewerView := <widget:makeComposite>(swtParent, 0)
        
        def swtTopToBottom := <custom:makeSashForm>(swtViewerView,
                                                    SWT.getVERTICAL())
        def swtSideToSide := <custom:makeSashForm>(swtTopToBottom,
                                                   SWT.getHORIZONTAL())
        
        def model := viewerModel
        def messageGraph := model.getTop()
        
        def vatSet := model.getVatSet()
        def vatMap := makeVatMap(vatSet, palette, traceline)
        
        # bottom
        def stackWalker := makeStackWalker(swtTopToBottom, palette,
                                           abstractAction,
                                           selectionModel, vatMap)
        
        # top-left
        # Map [VatName, List[TurnNode]]
        def poModel := model.getPOMap()
        def pov := makeProcessOrderView(swtSideToSide, palette,
                                        abstractAction,
                                        poModel, selectionModel,
                                        vatMap, stackWalker)
        
        # top-middle
        def mov := makeMessageOrderView(swtSideToSide, palette,
                                        abstractAction,
                                        messageGraph, selectionModel,
                                        vatMap, stackWalker)
        
        # top-right
        if (null == optMakeDebugView) {
            swtSideToSide.setWeights([40, 60])
        } else {
            def dv := optMakeDebugView(swtSideToSide, palette,
                                       abstractAction,selectionModel)
            
            swtSideToSide.setWeights([40, 35, 25])
            dv.layout()
        }
        swtTopToBottom.setWeights([50, 50])
        
        stackWalker.layout()
        pov.layout()
        mov.layout()
        
        def viewer {
            
            to getTopLevelPane() :near { return swtViewerView }
            
            to open() :void {}
            
            to layout() :void {
                
                def ssKids := swtSideToSide.getChildren()
                for ssKid in ssKids {
                    ssKid.layout()
                }
                def tbKids := swtTopToBottom.getChildren()
                for tbKid in tbKids {
                    tbKid.layout()
                }
                
                swtGrid`${viewer.getTopLevelPane()}:
                        ${swtTopToBottom}.X.Y`
            }
            
            to exportModelToDotFile(dotFile :File) :void {
                if (Ref.isNear(model)) {
                    # if message-order view has a selected item,
                    # start graph walk at that node
                    var root := mov.getSelectionModel()
                    if (root == null) {
                        # else, walk entire messageGraph
                        root := messageGraph
                    }
                    
                    model.exportToDotFile(root,
                                          dotFile, palette,
                                          vatMap, stackWalker)
                } else {
                    traceline("There is no model to export to dot file.")
                }
            }
            
            to showFilterOptions() :any {
                
                def result
                
                def CANCEL := 0
                def SAVE := 1
                def UPDATE_VIEWER := 2
                
                def swtDialog := makers["modelessDialog"](shell)
                def dialogPalette := palette.makeDialogPalette()
                def [xe, ye] := dialogPalette.getCharExtent()
                swtDialog.setForeground(dialogPalette.getFg())
                swtDialog.setBackground(dialogPalette.getBg())
                swtDialog.setFont(dialogPalette.getFont())
                swtDialog.setText("Filter Options")
                
                def ffModel := model.getOrMakeFileFilterModel()
                def fov := makeFilterOptionsView(swtDialog,
                                                 palette,
                                                 ffModel)
                
                def swtCancel := <widget:makeButton>(swtDialog,
                                                     SWT.getPUSH())
                swtCancel.setForeground(dialogPalette.getFg())
                swtCancel.setBackground(dialogPalette.getBg())
                swtCancel.setFont(dialogPalette.getFont())
                swtCancel.setText("Cancel")
                swtCancel.setSize((swtCancel.getText().size() +4) * xe, ye)
                
                #traceline(`swtCancel size: ${swtCancel.getSize()}`)
                
                swtCancel.addSelectionListener(def swtListenerForCancel {
                    to widgetSelected(swtEvent) :void {
                        # revert file filter model to original
                        model.remakeFileFilterModel()
                        swtDialog.close()
                        swtDialog.dispose()
                        bind result := CANCEL
                    }
                    to widgetDefaultSelected(swtEvent) :void {}
                })
                
                def swtSave := <widget:makeButton>(swtDialog,
                                                   SWT.getPUSH())
                swtSave.setEnabled(false)  # not working yet
                swtSave.setForeground(dialogPalette.getFg())
                swtSave.setBackground(dialogPalette.getBg())
                swtSave.setFont(dialogPalette.getFont())
                swtSave.setText("Save")
                swtSave.setSize((swtSave.getText().size() +4) * xe, ye)
                
                #traceline(`swtSave size: ${swtSave.getSize()}`)
                
                swtSave.addSelectionListener(def swtListenerForSave {
                    to widgetSelected(swtEvent) :void {
                        # remake file filter model from current model to
                        # cleanly break connections between model & observers
                        model.remakeFileFilterModel(ffModel)
                        swtDialog.close()
                        swtDialog.dispose()
                        bind result := SAVE
                    }
                    to widgetDefaultSelected(swtEvent) :void {}
                })
                
                def swtUpdateViewer := <widget:makeButton>(swtDialog,
                                                           SWT.getPUSH())
                swtUpdateViewer.setForeground(dialogPalette.getFg())
                swtUpdateViewer.setBackground(dialogPalette.getBg())
                swtUpdateViewer.setFont(dialogPalette.getFont())
                swtUpdateViewer.setText("Update Viewer")
                swtUpdateViewer.setSize(
                    (swtUpdateViewer.getText().size() +4) * xe, ye)
                
                #traceline(`swtUpdateViewer size: ${
                #           swtUpdateViewer.getSize()}`)
                
                swtUpdateViewer.addSelectionListener(
                    def swtListenerForUpdateViewer {
                        to widgetSelected(swtEvent) :void {
                            # remake file filter model from current model to
                            # cleanly break connections between model & observers
                            model.remakeFileFilterModel(ffModel)
                            swtDialog.close()
                            swtDialog.dispose()
                            bind result := UPDATE_VIEWER
                        }
                        to widgetDefaultSelected(swtEvent) :void {}
                    })
                
                swtDialog.setDefaultButton(swtUpdateViewer)
                
                fov.layout()
                
                swtGrid`${swtDialog}:
                            ${fov.getTopLevelPane()}.X.Y
                            ${swtCancel}     ${swtSave}     ${swtUpdateViewer}`
                
                palette.setMargins(swtDialog.getLayout(), 5, 10, 15, 10)
                
                #swtDialog.pack()
                swtDialog.open()
                return result
            }
        }
        return viewer
    }
    return makeViewer
}

