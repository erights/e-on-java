#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def makeWelcomeView :=
  <import:org.erights.e.tools.causeway.makeWelcomeView>

def viewerAuthor :=
  <import:org.erights.e.tools.causeway.viewerAuthor>

def causewayModelAuthor :=
  <import:org.erights.e.tools.causeway.causewayModelAuthor>
def makeSelectionModel :=
  <import:org.erights.e.tools.causeway.makeSelectionModel>
def makeSearchModel :=
  <import:org.erights.e.tools.causeway.makeSearchModel>

def makeDefaultUniFilter() :near {
    var uniFilter := [].asSet().diverge()
    
#  uniFilter.addElement("org/waterken/purchase_ajax/AsyncAnd.java")
    
#  uniFilter.addElement("org/erights/e/elang/cmd/cmdLoopMakerAuthor.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/cmdMakerMaker.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/controlLoopMaker.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/makeAnswerer.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/makeEvalContextAuthor.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/makeEvalPrinterAuthor.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/makeParseFuncAuthor.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/makeRepl.emaker")
#  uniFilter.addElement("org/erights/e/elang/cmd/runeAuthor.emaker")
    
    #uniFilter.addElement("hp/fred/FredRegisterX.java")
    
    #uniFilter.addElement("hp/polling/Guarantee.java")
    #uniFilter.addElement("hp/polling/PollerX.java")
    #uniFilter.addElement("hp/polling/WhenCyclerX.java")
    
    #uniFilter.addElement("hp/scoopfs/FileMarkerX.java")
    #uniFilter.addElement("hp/scoopfs/Log.java")
    #uniFilter.addElement("hp/scoopfs/MailArchiverX.java")
    #uniFilter.addElement("hp/scoopfs/Main.java")
    #uniFilter.addElement("hp/scoopfs/UIModelX.java")
    
    return uniFilter.snapshot()
}

/**
 */
def viewerDirectorAuthor(rootDirName :String,
                         <file>, <jar>, props,
                         makers, shell, abstractAction,
                         tcr, traceline) :near {
    
    
    def makeViewer := viewerAuthor(rootDirName :String,
                                   <file>, <jar>, props,
                                   makers, shell,
                                   abstractAction, tcr, traceline)
    
    def makeViewerDirector(parent, palette, traces) :near {
        
        def makeCausewayModel
        
        var view := null
        var model := null
        
        var uniFilter := makeDefaultUniFilter()
        
        if (traces != []) {
            
            def swtDialog := makers["modelessDialog"](shell,
                                                      SWT.getDIALOG_TRIM())
            
            def swtProgressMsg := <widget:makeLabel>(swtDialog,
                                                     SWT.getCENTER())
            def swtProgressBar := <widget:makeProgressBar>(swtDialog,
                                                           SWT.getSMOOTH())
            swtGrid`$swtDialog:
                    $swtProgressMsg.X
                    $swtProgressBar.X`
            
            swtDialog.pack()
            swtDialog.setSize(400, 150)
            
            swtDialog.open()
            
            bind makeCausewayModel := causewayModelAuthor(traces,
                                                          props,
                                                          swtProgressMsg,
                                                          swtProgressBar,
                                                          traceline)
            model := makeCausewayModel(uniFilter,
                                       swtProgressMsg,
                                       swtProgressBar)
            
            def selectionModel := makeSelectionModel()
            def searchModel := makeSearchModel(model.getTop())
            
            view := makeViewer(parent, palette,
                               model, selectionModel, searchModel)
            swtDialog.close()
            
        } else {
            view := makeWelcomeView(parent, palette, traceline)
        }
        
        def viewerDirector {
            
            to getView() :near { return view }
            
            to updateView(parent) :void {
                if (model != null) {
                    def ffm := model.getOrMakeFileFilterModel()
                    uniFilter := ffm.asUninterestingFilter()
                    
                    def swtDialog :=
                      makers["modelessDialog"](shell,
                                               SWT.getDIALOG_TRIM())
                    def swtProgressMsg :=
                      <widget:makeLabel>(swtDialog,
                                         SWT.getCENTER())
                    def swtProgressBar :=
                      <widget:makeProgressBar>(swtDialog,
                                               SWT.getSMOOTH())
                    swtGrid`$swtDialog:
                            $swtProgressMsg.X
                            $swtProgressBar.X`
                    
                    swtDialog.pack()
                    swtDialog.setSize(400, 150)
                    
                    swtDialog.open()
                    
                    model := makeCausewayModel(uniFilter,
                                               swtProgressMsg,
                                               swtProgressBar)
                    
                    def selectionModel := makeSelectionModel()
                    def searchModel := makeSearchModel(model.getTop())
                    
                    view := makeViewer(parent, palette,
                                       model, selectionModel, searchModel)
                    swtDialog.close()
                }
            }
        }
        
        return viewerDirector
    }
    
    return makeViewerDirector
}
