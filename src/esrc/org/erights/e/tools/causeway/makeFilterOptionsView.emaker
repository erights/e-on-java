#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>
def widgetType__uriGetter := <swtType:widgets.*>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def makeFilterOptionsView(swtParent, palette, foModel) :near {
    
    def swtFOView := <widget:makeComposite>(swtParent, 0)
    
    def fovPalette := palette.makeFilterOptionsViewPalette()
    swtFOView.setForeground(fovPalette.getFg())
    swtFOView.setBackground(fovPalette.getBg())
    swtFOView.setFont(fovPalette.getFont())
    
    def swtTree := <widget:makeTree>(swtFOView,
                                     SWT.getCHECK() | SWT.getBORDER() |
                                       SWT.getSINGLE() |
                                       (SWT.getH_SCROLL() |
                                          SWT.getV_SCROLL()))
    
    swtTree.setForeground(fovPalette.getFg())
    swtTree.setBackground(fovPalette.getBg())
    swtTree.setFont(fovPalette.getFont())
    
    # Useful maps for lookups in event handling.
    def itemToModelMap := [].asMap().diverge()
    def modelToItemMap := [].asMap().diverge()
    
    def buildTree(swtParent, palette, fileNode) :void {
        
        def swtItem := <widget:makeTreeItem>(swtParent, 0)
        itemToModelMap.put(swtItem, fileNode, true)
        modelToItemMap.put(fileNode, swtItem, true)
        swtItem.setText(fileNode.getName())
        swtItem.setChecked(fileNode.isChecked())
        swtItem.setGrayed(fileNode.isGrayed())
        
        if (!fileNode.isLeaf()) {
            def children := fileNode.getChildren()
            for child in children {  # depth-first
                buildTree(swtItem, palette, child)
            }
        }
    }
    
    buildTree(swtTree, fovPalette, foModel.getTop())
    
    def swtSelectionListener {
        to widgetSelected(swtEvent) :void {
            if (swtEvent.getDetail() == SWT.getCHECK()) {
                def model := itemToModelMap.fetch(swtEvent.getItem(), fn{})
                if (model != null) {
                    foModel.toggleChecked(model)
                }
            }
        }
        to widgetDefaultSelected(swtEvent) :void {}
    }
    swtTree.addSelectionListener(swtSelectionListener)
    
    
    def expandItem(swtItem) :void {
        swtItem.setExpanded(true)
        if (swtItem.getItemCount() > 0) {
            def swtNested := swtItem.getItems()
            for nested in swtNested {
                expandItem(nested)
            }
        }
    }
    
    # default selection
    def swtItems := swtTree.getItems()
    if (swtItems.size() > 0) {
        swtTree.setSelection([swtItems[0]])
        for item in swtItems {
            expandItem(item)
        }
    }
    
    def changeObserver {
        to fileNodeChanged(fileNode) :void {
            def swtItem := modelToItemMap.fetch(fileNode, fn{})
            if (swtItem != null) {
                swtItem.setChecked(fileNode.isChecked())
                swtItem.setGrayed(fileNode.isGrayed())
            }
        }
    }
    foModel.addObserver(changeObserver)
    
    
    def fov {
        
        to open() :void {}
        
        to layout() :void {
            
            swtGrid`${swtFOView}:
                    ${swtTree}.X.Y`
        }
        
        to getTopLevelPane() :near {
            return swtFOView
        }
    }
    return fov
}
