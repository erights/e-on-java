#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>

def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>

def Shell     := <swtType:widgets.Shell>
def PopupList := <swtType:custom.PopupList>
def Font      := <swtType:graphics.Font>

def sky__uriGetter := <import:com.skyhunter.*>
def logoURL := <resource:org/erights/e/icons/green-e-on-white-16.gif>

def paletteAuthor(rezKit, makers, traceline) :near {
    
    def colorMap := [].asMap().diverge()
    
    # Map the colors to X Windows color names
    # These names specify color attributes in DOT files, e.g., [color=dodgerblue]
    
    colorMap.put("mediumblue",
                 [rezKit.makeColor(0, 0, 205), "mediumblue"], true) # 0000CD
    colorMap.put("dodgerblue",
                 [rezKit.makeColor(30, 144, 255), "dodgerblue"], true) # 1E90FF
    colorMap.put("forestgreen",
                 [rezKit.makeColor(34, 139, 34), "forestgreen"], true) # 228B22
    colorMap.put("indigo",
                 [rezKit.makeColor(75, 0, 130), "indigo"], true) # 4B0082
    colorMap.put("darkslateblue",
                 [rezKit.makeColor(72, 61, 139), "darkslateblue"], true) # 483D8B
    colorMap.put("chocolate",
                 [rezKit.makeColor(210, 105, 30), "chocolate"], true) # D2691E
    colorMap.put("darkslategray",
                 [rezKit.makeColor(47, 79, 79), "darkslategray"], true) # 2F4F4F
    
    colorMap.put("darkred",
                 [rezKit.makeColor(139, 0, 0), "darkred"], true) # 8B0000
    colorMap.put("firebrick",
                 [rezKit.makeColor(178, 34, 34), "firebrick"], true) # B22222
    
    colorMap.put("lightsteelblue",
                 [rezKit.makeColor(176, 196, 222), "lightsteelblue"], true) #B0C4DE
    
    
    colorMap.put("whitesmoke",
                 [rezKit.makeColor(245, 245, 245), "whitesmoke"], true) # F5F5F5
    colorMap.put("linen",
                 [rezKit.makeColor(250, 240, 230), "linen"], true) # FAF0E6
    
    colorMap.put("white",
                 [rezKit.makeColor(255, 255, 255), "white"], true)
    
    colorMap.put("black",
                 [rezKit.makeColor(0, 0, 51), "black"], true) # Not really black
    
    def nVatColors := 6
    def vatColors := [].diverge()
    
    vatColors[0] := colorMap.fetch("mediumblue", fn{})
    vatColors[1] := colorMap.fetch("forestgreen", fn{})
    vatColors[2] := colorMap.fetch("indigo", fn{})
    vatColors[3] := colorMap.fetch("chocolate", fn{})
    vatColors[4] := colorMap.fetch("darkslategray", fn{})
    vatColors[5] := colorMap.fetch("dodgerblue", fn{})
    
    def fonts := [].asMap().diverge()
    
    def normal := SWT.getNORMAL()
    def bold := SWT.getBOLD()
    def italic := SWT.getITALIC()
    
    fonts.put(["Arial", "8", "normal"], rezKit.makeFont("Arial", 8, normal), true)
    fonts.put(["Arial", "8", "bold"], rezKit.makeFont("Arial", 8, bold), true)
    fonts.put(["Arial", "8", "italic"], rezKit.makeFont("Arial", 8, italic), true)
    
    fonts.put(["Arial", "9", "normal"], rezKit.makeFont("Arial", 9, normal), true)
    fonts.put(["Arial", "9", "bold"], rezKit.makeFont("Arial", 9, bold), true)
    fonts.put(["Arial", "9", "italic"], rezKit.makeFont("Arial", 9, italic), true)
    
    fonts.put(["Arial", "10", "normal"], rezKit.makeFont("Arial", 10, normal), true)
    fonts.put(["Arial", "10", "bold"], rezKit.makeFont("Arial", 10, bold), true)
    fonts.put(["Arial", "10", "italic"], rezKit.makeFont("Arial", 10, italic), true)
    
    fonts.put(["Arial", "12", "normal"], rezKit.makeFont("Arial", 12, normal), true)
    fonts.put(["Arial", "12", "bold"], rezKit.makeFont("Arial", 12, bold), true)
    fonts.put(["Arial", "12", "italic"], rezKit.makeFont("Arial", 12, italic), true)
    
    fonts.put(["Arial", "14", "normal"], rezKit.makeFont("Arial", 14, normal), true)
    fonts.put(["Arial", "14", "bold"], rezKit.makeFont("Arial", 14, bold), true)
    fonts.put(["Arial", "14", "italic"], rezKit.makeFont("Arial", 14, italic), true)
    
    fonts.put(["Courier New", "8", "normal"], rezKit.makeFont("Courier New", 8, normal), true)
    fonts.put(["Courier New", "8", "bold"], rezKit.makeFont("Courier New", 8, bold), true)
    fonts.put(["Courier New", "8", "italic"], rezKit.makeFont("Courier New", 8, italic), true)
    
    fonts.put(["Courier New", "9", "normal"], rezKit.makeFont("Courier New", 9, normal), true)
    fonts.put(["Courier New", "9", "bold"], rezKit.makeFont("Courier New", 9, bold), true)
    fonts.put(["Courier New", "9", "italic"], rezKit.makeFont("Courier New", 9, italic), true)
    
    fonts.put(["Courier New", "10", "normal"], rezKit.makeFont("Courier New", 10, normal), true)
    fonts.put(["Courier New", "10", "bold"], rezKit.makeFont("Courier New", 10, bold), true)
    fonts.put(["Courier New", "10", "italic"], rezKit.makeFont("Courier New", 10, italic), true)
    
    fonts.put(["Courier New", "12", "normal"], rezKit.makeFont("Courier New", 12, normal), true)
    fonts.put(["Courier New", "12", "bold"], rezKit.makeFont("Courier New", 12, bold), true)
    fonts.put(["Courier New", "12", "italic"], rezKit.makeFont("Courier New", 12, italic), true)
    
    fonts.put(["Courier New", "14", "normal"], rezKit.makeFont("Courier New", 14, normal), true)
    fonts.put(["Courier New", "14", "bold"], rezKit.makeFont("Courier New", 14, bold), true)
    fonts.put(["Courier New", "14", "italic"], rezKit.makeFont("Courier New", 14, italic), true)
    
    def metrics := [].asMap().diverge()
    
    def images := [].asMap().diverge()
    
    def multiplesURL := <resource:org/erights/e/tools/causeway/multiples.gif>
    def giantsCausewayURL := <resource:org/erights/e/tools/causeway/giants-causeway.jpg>
    
    images.put("multiples", rezKit.makeImage(multiplesURL.openStream()))
    images.put("giantsCauseway", rezKit.makeImage(giantsCausewayURL.openStream()))
    
    def makeBasicPalette(fgName, bgName, fontName) :near {
        
        def fg := colorMap.fetch(fgName, fn{})
        def bg := colorMap.fetch(bgName, fn{})
        
        def font := fonts.fetch(fontName, fn{})
        
        def basicPalette {
            to getFg() :near {
                if (fg =~ [color, _]) {
                    return color
                }
                return fg
            }
            to getBg() :near {
                if (bg =~ [color, _]) {
                    return color
                }
                return bg
            }
            to getFont() :near { return font }
            to getCharExtent() :near {
                return metrics.fetch(fontName, fn{})
            }
        }
        return basicPalette
    }
    
    def makePalette() :near {
        
        def palette {
            
            to setMetrics(gc) :boolean {
                
                if (metrics.size() > 0) { return true }
                
                def keys := fonts.getKeys()
                
                for k in keys {
                    def value := fonts.get(k)
                    gc.setFont(value)
                    def fm := gc.getFontMetrics()
                    def xe := fm.getAverageCharWidth()
                    def ye := fm.getHeight()
                    metrics.put(k, [xe, ye], true)
                }
                
                return true
            }
            
            to getImage(imageName :String) :near {
                return images.fetch(imageName, fn{})
            }
            
            to getDefaultVatColor() :near {
                return colorMap.fetch("black", fn{})
            }
            
            to getVatColor(i :int) :near {
                if (i < nVatColors) {
                    return vatColors[i]
                }
                return palette.getDefaultVatColor()
            }
            
            to makeWelcomePalette() :near {
                return makeBasicPalette("darkslateblue",
                                        "linen",
                                        ["Arial", "14", "bold"])
            }
            
            to makeFramePalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Arial", "10", "bold"])
            }
            
            to makeTitlePalette() :near {
                return makeBasicPalette("white",
                                        "darkslateblue",
                                        ["Arial", "12", "bold"])
            }
            to makeFolderPalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Arial", "9", "bold"])
            }
            to makeTabPalette() :near {
                return makeBasicPalette("black",
                                        "lightsteelblue",
                                        ["Arial", "9", "bold"])
            }
            to makePOPanePalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Arial", "9", "normal"])
            }
            to makeMessageTreePalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Arial", "9", "normal"])
            }
            to makeEStackPalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Courier New", "9", "normal"])
            }
            to makeECodePalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Courier New", "9", "normal"])
            }
            to makeDebugPanePalette() :near {
                return makeBasicPalette("black",
                                        "whitesmoke",
                                        ["Courier New", "8", "normal"])
            }
            to makeFilenamePalette() :near {
                return makeBasicPalette("black",
                                        "lightsteelblue",
                                        ["Arial", "10", "normal"])
            }
            to makeDescPalette() :near {
                return makeBasicPalette("black",
                                        "lightsteelblue",
                                        ["Arial", "10", "normal"])
            }
            to makeSmallerFont(font) :near {
                def fontData := font.getFontData()[0]
                fontData.setHeight(fontData.getHeight() -2)
                return rezKit.makeFont(fontData)
            }
            
            to makeLargerFont(font) :near {
                def fontData := font.getFontData()[0]
                fontData.setHeight(fontData.getHeight() +2)
                return rezKit.makeFont(fontData)
            }
            
            to setMargins(layout, w, h, hz, vt) :void {
                layout.setMarginWidth(w)
                layout.setMarginHeight(h)
                layout.setHorizontalSpacing(hz)
                layout.setVerticalSpacing(vt)
            }
            
            to zeroMargins(layout) :void {
                layout.setMarginWidth(0)
                layout.setMarginHeight(0)
                layout.setHorizontalSpacing(0)
                layout.setVerticalSpacing(0)
            }
            
            
        }
        return palette
    }
    return makePalette
}
