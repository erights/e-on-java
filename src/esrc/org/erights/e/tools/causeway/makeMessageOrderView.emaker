#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2008 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>
def widgetType__uriGetter := <swtType:widgets.*>
def ToolBar  := <widgetType:ToolBar>
def ToolItem := <widgetType:ToolItem>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()
def M := <swttools:menuKit>

def makeLamportSlot := <elib:slot.makeLamportSlot>
def whenever := <elib:slot.whenever>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>

def makeOutlineView := <import:org.erights.e.tools.causeway.makeOutlineView>

def makeWatcher() :near {
    def items := [].asSet().diverge()
    
    def watcher {
        
        to see(item) :void {
            items.addElement(item)
        }
        
        to hasSeen(item) :boolean {
            return items.contains(item)
        }
    }
    return watcher
}

# Useful maps for lookups in event handling.
def itemToModelMap := [].asMap().diverge()
def modelToItemMap := [].asMap().diverge()

def buildTree(swtParent, edge, ndx, vatMap, graphWalker, watcher) :void {
    
    if (watcher.hasSeen(edge)) {
        return;
    }
    watcher.see(edge)
    
    def swtItem := <widget:makeTreeItem>(swtParent, 0)
    
    itemToModelMap.put([swtItem, ndx], edge, true)
    modelToItemMap.put(edge, [swtItem, ndx], true)
    
    graphWalker.labelArcItem(vatMap, edge, swtItem)
    
    for ge => _ in edge.getTarget().outs() {
        buildTree(swtItem, ge, ndx, vatMap, graphWalker, watcher)
    }
}

def makeMOPane(swtParent, palette,
               graph, ndx, selectionModel,
               vatMap, graphWalker) :near {
    
    def swtPane := <widget:makeComposite>(swtParent, 0)
    def swtTree := <widget:makeTree>(swtPane,
                                     SWT.getSINGLE() |
                                       (SWT.getH_SCROLL() |
                                          SWT.getV_SCROLL()))
    def watcher := makeWatcher()
    for  edge => _ in graph.outs() {
        buildTree(swtTree, edge, ndx, vatMap, graphWalker, watcher)
    }
    
    def swtSelectionListener {
        to widgetSelected(swtEvent) :void {
            def swtItem := swtEvent.getItem()
            def edge := itemToModelMap.fetch([swtItem, ndx], fn{})
            selectionModel.setOptEdge(edge)
        }
        to widgetDefaultSelected(swtEvent) :void {}
    }
    swtTree.addSelectionListener(swtSelectionListener)
    
    def mop {
        
        to getPane() :near { return swtPane }
        
        to getWidget() :near { return swtTree }
        
        to activate() :void {}
        
        to layout() :void {
            
            swtGrid`${swtPane}:
                        ${swtTree}.X.Y`
            
            palette.zeroMargins(swtPane.getLayout())
        }
    }
    return mop
}

def makeMessageOrderView(swtParent, palette,
                         abstractAction,
                         moModel, selectionModel,
                         vatMap, graphWalker) :near {
    
    def swtMOView := <widget:makeComposite>(swtParent, 0)
    
    def getCurrentTree
    def outlineView := makeOutlineView(swtMOView, palette,
                                       abstractAction, getCurrentTree)
    
    def swtFolder := <widget:makeTabFolder>(swtMOView, 0)
    
    def tabKeeper := [].diverge()
    
    def swtTab := <widget:makeTabItem>(swtFolder, 0)
    
    def mop := makeMOPane(swtFolder, palette,
                          moModel, swtFolder.indexOf(swtTab), selectionModel,
                          vatMap, graphWalker)
    
    swtTab.setControl(mop.getPane())
    swtTab.setText("Message Order Tree")
    tabKeeper[swtFolder.indexOf(swtTab)] := [swtTab, mop]
    
    def selectionObserver {
        to edgeSelected(optEdge) :void {
            def tabbedItem := modelToItemMap.fetch(optEdge, fn{})
            if (tabbedItem != null) {
                def [swtItem, ndx] := tabbedItem
                swtFolder.setSelection(ndx)
                def [_, mop] := tabKeeper[ndx]
                mop.getWidget().setSelection([swtItem])
                mop.getWidget().showItem(swtItem)
            }
        }
    }
    selectionModel.addObserver(selectionObserver)
    
    bind getCurrentTree() :near {
        def ndx := swtFolder.getSelectionIndex()
        if (ndx != -1) {
            def [_, mop] := tabKeeper[ndx]
            return mop.getWidget()
        }
        return null
    }
    
    def mov {
        
        to open() :void {}
        
        to layout() :void {
            
            outlineView.layout()
            
            for [_, mop] in tabKeeper {
                mop.layout()
            }
            
            swtGrid`${swtMOView}:
                    ${outlineView.getTopLevelPane()}.X
                    ${swtFolder}.X.Y`
        }
        
    }
    return mov
}
