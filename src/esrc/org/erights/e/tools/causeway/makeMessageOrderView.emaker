#!/usr/bin/env rune

pragma.syntax("0.9")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>
def widgetType__uriGetter := <swtType:widgets.*>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()
def M := <swttools:menuKit>

def makeLamportSlot := <elib:slot.makeLamportSlot>
def whenever := <elib:slot.whenever>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>

def makeOutlineView := <import:org.erights.e.tools.causeway.makeOutlineView>

def makeMessageOrderView(swtParent, palette,
                         abstractAction,
                         moModel,
                         selectionModel, searchModel,
                         vatMap, graphWalker) :near {
    
    # Useful maps for lookups in event handling.
    
    # each item is defined by an swt tree item & a tab index.
    # each item maps to a model which is defined by a graph element & item index
    # [swtItem, ndx] => [element, itemIndex]
    
    def itemToModelMap := [].asMap().diverge()  # one-to-one
    
    # a particular graph element can have multiple instances of swt tree items
    # Map[model, List[item]]
    def modelToItemsMap := [].asMap().diverge()  # one-to-many
    
    def seen := [].asSet().diverge()
    
    def buildTreeFromNode
    def buildTreeFromEdge(swtParent, palette,
                          edge, ndx,
                          vatMap, graphWalker) :void {
        
        if (seen.contains(edge)) {
            return;
        }
        seen.addElement(edge)
        
        # filter SentIf events
        def context := edge.getContext()
        if (context[0] == "org.ref_send.log.SentIf") {
            return;
        }

        def swtItem := <widget:makeTreeItem>(swtParent, 0)
        
        def items := modelToItemsMap.fetch(edge, fn{[].diverge()})
        items.push([swtItem, ndx])
        modelToItemsMap[edge] := items
        
        itemToModelMap.put([swtItem, ndx], [edge, 0], true)

        def label := graphWalker.getElementLabel(edge, 0)
        
        def vatName := edge.getOrigin().getID()[0]
        def attr := vatMap.fetchDisplayAttributes(vatName)
        swtItem.setForeground(attr[1][0])
        
        swtItem.setText(label)

        def target := edge.getTarget()
        buildTreeFromNode(swtItem, palette,
                          target, ndx,
                          vatMap, graphWalker,
                          edge)
    }
    
    bind buildTreeFromNode(swtParent, palette,
                           node, ndx,
                           vatMap, graphWalker,
                           edge) :void {
        
        if (node.getID()[0] == "bottom") { return }
        
        # nodes represent Got events
        def swtGotItem := <widget:makeTreeItem>(swtParent, 0)

        def items := modelToItemsMap.fetch(node, fn{[].diverge()})
        def itemIndex := items.size()
        items[itemIndex] := [swtGotItem, ndx]
        modelToItemsMap[node] := items

        # a node (but never an edge) can have multiple causes and will
        # be represented in the mov multiple times, by different swt items.
        # include the itemIndex in the item-to-model map for
        # a unique mapping, i.e., a one-to-one mapping.
        
        itemToModelMap.put([swtGotItem, ndx], [node, itemIndex], true)

        def label := graphWalker.getElementLabel(node, 0)
        
        def vatName := node.getOrigin().getID()[0]
        def attr := vatMap.fetchDisplayAttributes(vatName)
        swtGotItem.setForeground(attr[1][0])
        
        swtGotItem.setText(label)

        # check for multiple senders
        if (node.getIncomingCount() > 1) {
            def edgeList := [].diverge()
            for incoming => _ in node.ins() {
                def context := incoming.getContext()
                # filter SentIf events
                if (context[0] != "org.ref_send.log.SentIf") {
                    edgeList.push(incoming)
                }
            }
            if (edgeList.size() > 1) {
                swtGotItem.setImage(palette.getImage("multiples"))
                if (edgeList[edgeList.size() -1] != edge) {
                    # if not last edge, don't show kids
                    return
                }
            }
        }
        for ge => gt in node.outs() {
            buildTreeFromEdge(swtParent, palette,
                              ge, ndx,
                              vatMap, graphWalker)
        }
    }
    
    def makeMOPane(swtParent, palette,
                   graph, ndx, selectionModel,
                   vatMap, graphWalker) :near {
        
        def swtPane := <widget:makeComposite>(swtParent, 0)
        def swtTree := <widget:makeTree>(swtPane,
                                         SWT.getSINGLE() |
                                           (SWT.getH_SCROLL() |
                                              SWT.getV_SCROLL()))
        
        def mopPalette := palette. makeMessageTreePalette()
        swtPane.setForeground(mopPalette.getFg())
        swtPane.setBackground(mopPalette.getBg())
        swtPane.setFont(mopPalette.getFont())
        swtTree.setForeground(mopPalette.getFg())
        swtTree.setBackground(mopPalette.getBg())
        swtTree.setFont(mopPalette.getFont())
        
        buildTreeFromNode(swtTree, palette,
                          graph, ndx,
                          vatMap, graphWalker,
                          null)
        
        # selection begins here by handling swt user events.
        # selectionModel supports synchronized selection across views.
        def swtSelectionListener {
            to widgetSelected(swtEvent) :void {
                def swtItem := swtEvent.getItem()
                def model := itemToModelMap.fetch([swtItem, ndx], fn{})
                if (model =~ [element, itemIndex]) {
                    selectionModel.setOptElement(element, itemIndex)
                } 
            }
            to widgetDefaultSelected(swtEvent) :void {}
        }
        swtTree.addSelectionListener(swtSelectionListener)
        
        def mop {
            
            to getPane() :near { return swtPane }
            
            to getWidget() :near { return swtTree }
            
            to activate() :void {}
            
            to layout() :void {
                
                swtGrid`${swtPane}:
                        ${swtTree}.X.Y`
                
                palette.zeroMargins(swtPane.getLayout())
            }
        }
        return mop
    }
    
    def swtMOView := <widget:makeComposite>(swtParent, 0)
    
    def fPalette := palette.makeFolderPalette()
    
    swtMOView.setForeground(fPalette.getFg())
    swtMOView.setBackground(fPalette.getBg())
    swtMOView.setFont(fPalette.getFont())
    
    def getCurrentTree
    def getActionTargets
    def outlineView := makeOutlineView(swtMOView, palette,
                                       abstractAction, getActionTargets)
    
    def swtFolder := <widget:makeTabFolder>(swtMOView, 0)
    swtFolder.setForeground(fPalette.getFg())
    swtFolder.setBackground(fPalette.getBg())
    swtFolder.setFont(fPalette.getFont())
    
    def tabKeeper := [].diverge()
    
    def swtTab := <widget:makeTabItem>(swtFolder, 0)
    
    def mop := makeMOPane(swtFolder, palette,
                          moModel, swtFolder.indexOf(swtTab), selectionModel,
                          vatMap, graphWalker)
    
    swtTab.setControl(mop.getPane())
    swtTab.setText("Message Order Tree")
    tabKeeper[swtFolder.indexOf(swtTab)] := [swtTab, mop]
    
    # select top item & expand tree as default selection
    swtFolder.setSelection(swtFolder.indexOf(swtTab))
    def swtItems := mop.getWidget().getItems()
    if (swtItems.size() > 0) {
        mop.getWidget().setSelection([swtItems[0]])
        outlineView.expandTree(mop.getWidget())
    }
    
    # context menu for mop
    [def doBookmark,
    
     def doFindMultiples,
     
     def doGoTo]
    
    bind doBookmark extends abstractAction(doBookmark) {
        to run() :void {
            def ndx := swtFolder.getSelectionIndex()
            if (ndx != -1) {
                def [_, mop] := tabKeeper[ndx]
                def swtItems := mop.getWidget().getSelection()
                if (swtItems.size() > 0) {
                    def model := itemToModelMap.fetch([swtItems[0], ndx], fn{})
                    if (model != null) {
                        searchModel.bookmark(model)
                    }
                }
            }
        }
        to getLabel()            :String { return "&Bookmark" }
        to getOptTip()           :String { 
            return "Adds a bookmark in the Search view for this tree item" 
        }
    }
    
    bind doFindMultiples extends abstractAction(doFindMultiples) {
        to run() :void {
            def ndx := swtFolder.getSelectionIndex()
            if (ndx != -1) {
                def [_, mop] := tabKeeper[ndx]
                def swtItems := mop.getWidget().getSelection()
                if (swtItems.size() > 0) {
                    def model := itemToModelMap.fetch([swtItems[0], ndx], fn{})
                    if (model != null) {
                        searchModel.findMultiples(model, swtItems[0].getText())
                    }
                }
            }
        }
        to getLabel()            :String { return "&Find Multiples" }
        to getOptTip()           :String { 
            return "Finds all senders for this target" 
        }
    }
    
    bind doGoTo extends abstractAction(doGoTo) {
        to run() :void {
            #traceline("doGoTo()")
        }
        to getLabel()            :String { return "&Go To" }
        to everEnabledReporter() :EverReporter {
            return whenever([], fn{false})
        }
    }
    
    def menuAction := M.menu([doBookmark,
                              M.sep(),
                              doFindMultiples,
                              M.sep(),
                              doGoTo])
    
    def menuMap := [].asMap().diverge()
    
    def swtContextMenu := menuAction.makeMenu(mop.getWidget(), menuMap)
    
    var multiplesSelected := false
    var multiples := null
    
    # participate in synchronized selection across views
    def selectionObserver {
        to placeSelected(optPlace) :void {
            if (null != optPlace) {  # ignore null
            
                # either something will be selected or not.
                # in either case clear multiples selection.
                if(multiplesSelected) {
                    for [[item, _], bg] in multiples {
                        item.setBackground(bg)
                    }
                    multiplesSelected := false
                    multiples := null
                }

                def element := optPlace.getElement()
                def itemIndex := optPlace.getItemIndex()
                def items := modelToItemsMap.fetch(element, fn{null})
                if (null != items && itemIndex < items.size()) {
                    
                    if (items.size() > 1) {  # multiple causes
                        multiplesSelected := true
                        multiples := [].diverge()
                            
                        for i in 0 ..! items.size() {
                            def [item, _] := items[i]
                            def c := item.getBackground()
                            item.setBackground(palette.getMultiplesBg())
                            multiples[i] := [items[i], c]
                        }
                    }
                    
                    def [swtItem, ndx] := items[itemIndex]
                    swtFolder.setSelection(ndx)  # select tab
                    def [_, mop] := tabKeeper[ndx]
                    mop.getWidget().setSelection([swtItem])
                    mop.getWidget().showItem(swtItem)  # scroll into view
                    if (multiplesSelected) { 
                        # automatically findMultiples to simplify navigation
                        def model := itemToModelMap.fetch(items[itemIndex], fn{})
                        searchModel.findMultiples(model, swtItem.getText())
                    }
                } else {
                    def ct := getCurrentTree()
                    if (null != ct) {
                        ct.deselectAll()
                    }
                }
            }
        }
    }
    selectionModel.addObserver(selectionObserver)
    
    bind getCurrentTree() :near {
        def ndx := swtFolder.getSelectionIndex()
        if (ndx != -1) {
            def [_, mop] := tabKeeper[ndx]
            return mop.getWidget()
        }
        return null
    }
    
    bind getActionTargets(_ :String) :List {
        def swtTree := getCurrentTree()
        if (null != swtTree) {
            return [swtTree]
        }
        return null
    }
    
    def mov {
        
        to open() :void {}
        
        to layout() :void {
            
            outlineView.layout()
            
            for [_, mop] in tabKeeper {
                mop.layout()
            }
            
            swtGrid`${swtMOView}:
                    ${outlineView.getTopLevelSWTControl()}.X
                    ${swtFolder}.X.Y`
        }
        
        # exportModelToDotFile starts with the currently select mov item
        to getSelectionModel() :near {
            def swtTree := getCurrentTree()
            if (null != swtTree) {
                def selection := swtTree.getSelection()
                if (selection.size() > 0) {
                    def ndx := swtFolder.getSelectionIndex()
                    def model := itemToModelMap.fetch([selection[0], ndx], fn{})
                    if (model != null) {
                        if (model =~ [element, _]) {
                            if (element.isNode()) {
                                return element
                            } else {
                                return element.getTarget()
                            }
                        }
                    }
                }
            }
            return null
        }
    }
    return mov
}
