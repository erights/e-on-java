#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def makeSourceSpan := <elib:base.makeSourceSpan>
def <causeway> := <import:org.erights.e.tools.causeway.*>
def makeMessageGraph := <causeway:makeMessageGraph>

# [[start-line, start-col], [end-line, end-col]]
# [[1, 0]] is the first character in a source file.
# start-col refers to the first character of interest.
# end-col refers to the last character of interest.
def SourceSpan := Tuple[Tuple[int,int], Tuple[int, int]]

# [filename, fncname]
def SourceName := Tuple[String, String]

# A [source-name, source-span]
def StackEntry := Tuple[SourceName, nullOk[SourceSpan]]

# top-to-bottom list of stack entries
def Stack := List[StackEntry]

def VatName := String

def Turn := int
def Anchor := int

def UTurn := Tuple[VatName, Turn]

# one of "org.ref_send.log.Sent", ...
def SendingContext := String

# Turn valid trace file spans into a fully-specified SourceSpan.
# For example,
# [ [ 5 ] ] ==>        [ [ 5, 0 ], [ 5, 0 ] ]
# [ [ 5 ], [ 6 ] ] ==> [ [ 5, 0 ], [ 6, 0 ] ]

def spanner(span) :SourceSpan {
    def term`[ [@{sline :int},
                @{scolL :List[int]}?], 
              ([@{elineL :List[int]}, 
                @{ecolLL :List[List[int]]}?])?]` := span
    return [[sline,
             if (scolL =~ [scol]) {scol} else {0}],
            [if (elineL =~ [eline]) {eline} else {sline},
             if (ecolLL =~ [[ecol]]) {ecol} else {
        if (scolL =~ [scol]) {scol} else {0}}]]
}

/**
 * <tt>makeRawGraph</tt> returns the messageGraph,
 * the top element for navigating the significant portion of that graph,
 * and the set of pathnames seen by the parse.
 */
def makeRawGraph(ttChunks,
                 traceline) :Tuple[near, near, near] {
    
    # Map[MsgID, EventArc]
    def msgMap := [].asMap().diverge()
    
    # Messages := List[MsgID]
    # Map[Condition, Messages]
    def condMap := [].asMap().diverge()
    
    def resolveds := [].diverge()
    
    def graph := makeMessageGraph(traceline)
    
    # top has no incoming edges; bottom has no outgoing edges
    def top := graph.makeTurnNode(["top", 0])
    def bottom := graph.makeTurnNode(["bottom", 0])
    graph.addTurnNode(top)
    graph.addTurnNode(bottom)
    
    # set of source paths seen during parse
    var pathnames := [].asSet().diverge()
    
    # Parse term tree structure. Return E Stack object which could be empty.
    def parseStack(stack) :Stack {
        def entries := [].diverge()
        
        for stackFrame in stack {
            
            def term`{ "name": @{fnc :String},
                       "source": @{source :String},
                       ("span": @optSpan)?,
                       @_* 
                     }` := stackFrame
            def optSpanner := if (optSpan =~ [span]) {
                spanner(span)
            } else {
                null
            }
            entries.push([[source, fnc], optSpanner])
            # add to set of source paths seen during parse
            pathnames.addElement(source)
        }
        return entries.snapshot()
    }
    
    def parseOptStack(optStack) :Stack {
        switch (optStack) {
            match [] { return [] }
            match [stack] { return parseStack(stack) }
        }
    }
    
    # Return the node for the turn in the vat.
    # If the node does not exist yet, make it.
    def getOrMakeTurnNode(name :VatName, turn :Turn) :near {
        var node := graph.optGet([name, turn])
        if (node == null) {
            node := graph.makeTurnNode([name, turn])
            graph.addTurnNode(node)
        }
        return node
    }

    # Maps from elements to chunks
    def chunkMap := [].asMap().diverge()
    
    for i => chunk in ttChunks {
        
        # types is the list of type names of the current chunk, in order,
        # from most specific subtype to more general supertypes.
        def term`{"$$": [@{types :List[String]}*], @_* }` := chunk
        def subtype := types[0]
        def subtypeName := subtype.split(".").last()
        
        var optSpan := null
        
        if (chunk =~ term`{@dollar: @_, @_*}`) {
            optSpan := dollar.getOptSpan()
            if (null != optSpan && i +1 < ttChunks.size()) {
                
                if (ttChunks[i +1] =~ term`{@nextDollar: @_, @_*}`) {
                    def nextOptSpan := nextDollar.getOptSpan()
                    if (null != nextOptSpan) {
                        optSpan := makeSourceSpan.optCover(optSpan,
                                                           nextOptSpan)
                    }
                }
            }
        }
        
        switch (chunk) {
            
            match term`{ "$$": [ @_*,
                                     "org.ref_send.log.Sent",
                                     "org.ref_send.log.Event" ],
                             "anchor": {
                                 "number": @{anchor :int},
                                 "turn": {
                                     "loop": @{name :String},
                                     "number": @{turn :int}
                                 }
                             },
                             ("condition": @{optCondition :List[String]})?,
                             "message": @{message :String},
                             ("text": @{comment :List[String]})?,
                             ("trace": { "calls": [@optStack*] })?,
                             @_*
                           }` {
                def origin := getOrMakeTurnNode(name, turn)
                
                # Create E Stack object, possibly empty, from term tree.
                def entries := parseOptStack(optStack)
                
                var edge := msgMap.fetch(message, fn{null})
                if (edge == null) {
                    
                    # Sent seen first.
                    # Make the edge and put it in the msgMap.
                    # The corresponding Got will fetch the edge from the
                    # msgMap.
                    # The anchor number for an edge is set by the Sent.
                    
                    edge := graph.makeEventArc(origin, bottom,
                                               subtype, entries)
                    edge.setAnchor(anchor)
                    edge.addLogFile(optSpan)
                    msgMap[message] := edge
                    
                } else {
                    
                    # Got (or something) seen first.
                    # Fetch the edge from the msgMap.
                    # Replace place-holder top object with origin.
                    # Update send context with stack trace.
                    # Update anchor number.
                    
                    if (edge.getOrigin() == top) {
                        edge.setOrigin(origin)
                        edge.setContext(subtype, entries)
                        edge.setAnchor(anchor)
                        edge.addLogFile(optSpan)
                    } else if ((chunkMap.fetch(edge, fn{}) =~ 
                                  oldChunk :notNull) &&
                               chunk <=> oldChunk) {  # term tree compare
                        # ignore duplicate
                    } else {
                        traceline(
                            `origin conflict for $message ($subtypeName)`)
                    }
                }
                if (comment =~ [text]) {
                    edge.setOptText(text)
                } else if (entries =~ []) {
                    if (types.contains("org.ref_send.log.Returned")) {
                        edge.setOptText("# return ...");
                    }
                }
                edge.setMessageID(message)
                if (optCondition =~ [condition]) {
                    # TODO assert that types must include SentIf
                    def messages := condMap.fetch(condition,
                                                  fn{[].diverge()})
                    messages.push(message)
                    condMap[condition] := messages
                }
                chunkMap[edge] := chunk
            }
            match term`{ "$$": [ @_*,
                                     "org.ref_send.log.Got",
                                     "org.ref_send.log.Event" ],
                             "anchor": {
                                 "number": @{anchor :int},
                                 "turn": {
                                     "loop": @{name :String},
                                     "number": @{turn :int}
                                 }
                             },
                             "message": @{message :String},
                             ("trace": { "calls": [@optStack*] })?,
                             @_*
                           }` {
                
                def target := getOrMakeTurnNode(name, turn)
                
                var edge := msgMap.fetch(message, fn{null})
                if (edge == null) {
                    
                    # Got seen first.
                    # Make the edge and put it in the msgMap.
                    # The corresponding Sent will fetch the edge from the
                    # msgMap.
                    
                    edge := graph.makeEventArc(top, target,
                                               "unknown sender", [])
                    msgMap[message] := edge
                    
                } else {
                    
                    # Sent (or something) seen first.
                    # Fetch the edge from the msgMap.
                    # Replace place-holder bottom object with target.
                    # Update got context with stack trace.
                    
                    if (edge.getTarget() == bottom) {
                        edge.setTarget(target)
                    } else if ((chunkMap.fetch(target, fn{}) =~ 
                                  oldChunk :notNull) &&
                               chunk <=> oldChunk) {  # term tree compare
                        # ignore duplicate
                    } else {
                        traceline(
                            `target conflict for $message ($subtypeName)`)
                    }
                }
                
                # Create E Stack object, possibly empty, from term tree.
                def entries := parseOptStack(optStack)
                target.setContext(subtype, entries)
                target.addLogFile(optSpan)
                target.setMessageID(message)
                chunkMap[target] := chunk
            }
            
            match term`{ "$$": [ @_*,
                                     "org.ref_send.log.Resolved",
                                     "org.ref_send.log.Event" ],
                             @_*
                           }` {
                
                resolveds.push([chunk, optSpan])
            }
            
            match term`{ "$$": [ @_*,
                                     "org.ref_send.log.Comment",
                                     "org.ref_send.log.Event" ],
                             "anchor": {
                                 "number": @{anchor :int},
                                 "turn": {
                                     "loop": @{name :String},
                                     "number": @{turn :int}
                                 }
                             },
                             ("text": @{comment :List[String]})?,
                             ("trace": { "calls": [@optStack*] })?,
                             @_*
                           }` {
                
                def origin := getOrMakeTurnNode(name, turn)
                
                # Create E Stack object, possibly empty, from term tree.
                def entries := parseOptStack(optStack)
                
                def edge := graph.makeEventArc(origin, bottom,
                                               "org.ref_send.log.Comment",
                                               entries)
                edge.setAnchor(anchor)
                edge.addLogFile(optSpan)
                
                if (comment =~ [text]) {
                    edge.setOptText(text)
                }
#               chunkMap[edge] := chunk
            }
            match _ {
                traceline(`no match: $chunk`)
            }
        }
    }
    
    def resolvedEdges := [].diverge()
    for [r, span] in resolveds {
        if (r =~ term`{ "$$": [ @_*,
                                "org.ref_send.log.Resolved",
                                "org.ref_send.log.Event" ],
                        "anchor": {
                            "number": @{anchor :int},
                            "turn": {
                                "loop": @{name :String},
                                "number": @{turn :int}
                            }
                        },
                        "condition": @{condition :String},
                        ("text": @{comment :List[String]})?,
                        ("trace": { "calls": [@optStack*] })?,
                        @_*
                      }`) {
            
            def messages := condMap.fetch(condition, fn{null})
            if (messages != null) {
                
                def origin := getOrMakeTurnNode(name, turn)
                
                # Create E Stack object, possibly empty, from term tree.
                def entries := parseOptStack(optStack)
                
                for m in messages {
                    
                    def target := msgMap[m].getTarget()
                    
                    def edge := graph.makeEventArc(origin, target,
                                                   "org.ref_send.log.Resolved",
                                                   entries)
                    resolvedEdges.push(edge)
                    edge.setAnchor(anchor)
                    edge.addLogFile(span)

                    edge.setOptText("# resolved ...");
#                   chunkMap[edge] := r
                }
            }
        }
    }
    
    def roots := graph.getRoots()
    for r in roots {
        if (r != top) {
            graph.makeEventArc(top, r, "", [])
        }
    }
    pathnames := pathnames.sort()
    
    return [graph, top, pathnames.snapshot()]
}
