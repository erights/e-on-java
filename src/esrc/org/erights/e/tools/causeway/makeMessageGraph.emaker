#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def File := <type:java.io.File>
def templateNode := <elib:tables.graph.templateNode>
def templateArc := <elib:tables.graph.templateArc>
def makeDirectedGraph := <elib:tables.graph.makeDirectedGraph>

# [[start-line, start-col], [end-line, end-col]]
def SourceSpan := Tuple[Tuple[int,int], Tuple[int, int]]

# [filename, fncname]
def SourceName := Tuple[String, String]

# A [source-name, source-span]
def StackEntry := Tuple[SourceName, nullOk[SourceSpan]]

# top-to-bottom list of stack entries
def Stack := List[StackEntry]

def VatName := String

def Turn := int

def UTurn := Tuple[VatName, Turn]

# one of "org.ref_send.log.Sent", ...
def LogEvent := String

def CLIP := 0
def SKIP := 1
def KEEP := 2

def makeWatcher() :near {
    def items := [].asSet().diverge()
    
    def watcher {
        
        to see(item) :void {
            items.addElement(item)
        }
        
        to hasSeen(item) :boolean {
            return items.contains(item)
        }
    }
    return watcher
}

def tagToColor(tag :int, normal :String) :String {
    switch (tag) {
        match ==CLIP { return "firebrick" }
        match ==SKIP { return "goldenrod" }
        match ==KEEP { return normal }
    }
} 

/**
 * <tt>makeMessageGraph</tt>
 * <p>
 *
 */
def makeMessageGraph(traceline) :near {
    
    def dag := makeDirectedGraph(traceline)
    
    def mkTurnNode(id :UTurn) :near {
        var gotEvent := ""
        var gotStack := []
        var optTimestamp :int := 0;
        def logs := [].diverge()
        var tag :int := KEEP

        def turnNode extends templateNode(turnNode, id) {

            # A node's origin is itself.
            to getOrigin() :near {
                return turnNode
            }
            
            to getVatName() :VatName {
                return id[0]
            }
            
            to getContext() :Tuple[LogEvent, Stack] {
                return [gotEvent, gotStack]
            }
            to setContext(event :LogEvent, stack :Stack) :void {
                gotEvent := event
                gotStack := stack
            }
            
            to getOptTimestamp() :int {
                return optTimestamp
            }
            to setOptTimestamp(ts :int) :void {
                optTimestamp := ts
            }

            to getOptText() :nullOk[String] {
                return null
            }

            to getLogFiles() :List {
                return logs.snapshot()
            }
            to addLogFile(optSpan) :void {
                if (null != optSpan) {
                    logs.push(optSpan)
                }
            }
            
            to getTag() :int {
                return tag
            }
            to setTag(newTag :int) :void {
                tag := newTag
            }

            to __printOn(out :TextWriter) :void {
                out.print(id)
            }
        }
    }
    
    def mkEventArc(origin :near,
                   target :near,
                   var sendEvent :LogEvent,
                   var sendStack :Stack) :near {
        var inTurn :int := 0
        var optTimestamp :int := 0;
        var optText := null
        def logs := [].diverge()
        var tag :int := KEEP
        var why :String := ""

        def eventArc extends templateArc(eventArc, origin, target) {
            to getContext() :Tuple[LogEvent, Stack] {
                return [sendEvent, sendStack]
            }
            to setContext(event :LogEvent, stack :Stack) :void {
                sendEvent := event
                sendStack := stack
            }
            
            to getInTurn() :int { return inTurn }
            to setInTurn(newInTurn :int) :void { inTurn := newInTurn }
            
            to getKey() :Tuple[UTurn, int] {  # for process-order sorting
                return [eventArc.getOrigin().getID(), inTurn]
            }
            
            to getOptTimestamp() :int {
                return optTimestamp
            }
            to setOptTimestamp(ts :int) :void {
                optTimestamp := ts
            }
            
            to getOptText() :nullOk[String] {
                return optText
            }
            to setOptText(text :String) :void {
                optText := text
            }

            to getLogFiles() :List {
                return logs.snapshot()
            }
            to addLogFile(optSpan) :void {
                if (null != optSpan) {
                    logs.push(optSpan)
                }
            }
            
            to getTag() :int {
                return tag
            }
            to setTag(newTag :int) :void {
                tag := newTag
            }

            to rememberWhy(reason :String) :void {
                why := reason
            }
            to tellWhy() :String {
                return why
            }
        }
    }
    
    def walkDots(edge, textWriter, palette,
                 vatMap, graphWalker, watcher) :void {
        
        if (watcher.hasSeen(edge)) {
            return;
        }
        watcher.see(edge)
        
        def [ovat, oturn] := edge.getOrigin().getID()
        def [tvat, tturn] := edge.getTarget().getID()
        
        def oattr := vatMap.fetchDisplayAttributes(ovat)
        def tattr := vatMap.fetchDisplayAttributes(tvat)
        
        # [vatDisplayName, [vatColor, colorName]]
        
        def oname := oattr[0]
        def tname := tattr[0]
        
        def ocolor := tagToColor(edge.getOrigin().getTag(), oattr[1][1])
        def tcolor := tagToColor(edge.getTarget().getTag(), tattr[1][1])
        
        textWriter.println(`"[$oname, $oturn]" [fontcolor=$ocolor];`)
        textWriter.println(`"[$tname, $tturn]" [fontcolor=$tcolor];`)
        
        var ep := graphWalker.getElementLabel(edge, 0)

        def ecolor := tagToColor(edge.getTag(), "lightslategray")
        
        var eattr := `color=$ecolor`
        if (edge.getContext()[0].split(".").last() == "SentIf") {
            eattr += ` style=dotted` # de-emphasize SentIf events
        }
        if (ep.startsWith(`##`)) {  # italicize Causeway comments
            eattr += ` fontname="Times-Italic"`
        }
        
        ep := E.toQuote(ep.replaceAll("\u2756", "&#10070;")) #escape for dotfile

        eattr += ` label=$ep`
        
        textWriter.println(`"[$oname, $oturn]" -> "[$tname, $tturn]" [$eattr];`)
        
        for grandEdge => _ in edge.getTarget().outs() {
            walkDots(grandEdge, textWriter, palette,
                     vatMap, graphWalker, watcher)
        }
    }

    def messageGraph {
        
        to addTurnNode(node) :void {
            dag.addNode(node)
        }
        
        to removeTurnNode(node) :void {
            dag.removeNode(node)
        }
        
        to makeTurnNode(id :UTurn) :near {
            return mkTurnNode(id)
        }
        
        to makeEventArc(origin :near,
                        target :near,
                        sendEvent :LogEvent,
                        sendStack :Stack) :near {
            return mkEventArc(origin, target,
                              sendEvent, sendStack)
        }
        
        to optGet(id) :near { return dag.optGet(id) }
        
        to getRoots() :near { return dag.getRoots() }
        to getLeaves() :near { return dag.getLeaves() }
        
        to getSize() :near { return dag.getSize() }
        
        to connectTheDots(root, dotFile :File, palette,
                          vatMap, graphWalker) :void {
            def textWriter := dotFile.textWriter()
            try {
                textWriter.println(`digraph messageGraph {`)
                textWriter.println(`size = "8.5, 11";`)
                
                textWriter.println(`label = "Causeway Message Graph";`)
                textWriter.println(`fontsize = 18;`) 
                textWriter.println(`labelloc = t;`)
                textWriter.println(`labeljust = r;`)

                textWriter.println(`node [shape=plaintext, fontsize=12];`)
                
                def watcher := makeWatcher()
                for edge => _ in root.outs() {
                    walkDots(edge, textWriter, palette,
                             vatMap, graphWalker, watcher)
                }
                
                textWriter.println(`}`)
                
            } finally {
                textWriter.close()
            }
        }
    }
    return messageGraph
}
