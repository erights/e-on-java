#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2009 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def SWT := <swt:makeSWT>

def swtType__uriGetter := <type:org.eclipse.swt.*>
def widgetType__uriGetter := <swtType:widgets.*>
def Shell    := <widgetType:Shell>
def Menu     := <widgetType:Menu>
def MenuItem := <widgetType:MenuItem>
def ToolBar  := <widgetType:ToolBar>
def ToolItem := <widgetType:ToolItem>
def ShellListener := <swtType:events.ShellListener>
def PaintListener := <swtType:events.PaintListener>

def sky__uriGetter := <import:com.skyhunter.*>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()
def M := <swttools:menuKit>

def makeLamportSlot := <elib:slot.makeLamportSlot>
def whenever := <elib:slot.whenever>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>

def <causeway> := <import:org.erights.e.tools.causeway.*>
def paletteAuthor := <causeway:paletteAuthor>
def aboutDialogAuthor := <causeway:aboutDialogAuthor>
def onlineHelpAuthor := <causeway:onlineHelpAuthor>

def causewayEditorAuthor(rezKit,
                         abstractAction,
                         makers, openners,
                         <file>, <jar>, props,
                         activate, shutdown,
                         tcr,
                         traceline) :near {
    
    def debugln(str) :void {
        traceline(str)
        #statusBar.setText(str)
    }
    

    def editorShellListener :ShellListener := def _ {
        to shellClosed(event) :void {
#           rezKit.disposeAll()
            shutdown()
        }
        to shellActivated(event) :void {}
        to shellDeactivated(event) :void {}
        to shellIconified(event) :void {}
        to shellDeiconified(event) :void {}
    }
    
    def makePalette := paletteAuthor(rezKit, makers, traceline)
    def palette := makePalette()

    def makeCausewayEditor(var rootDirName :String, traces :List) :near {
    
        def causewayEditor

        def editorShell := makers["frame"]()
        editorShell.addShellListener(editorShellListener)
        
        var hasMetrics := false
        def listenerForMetrics :PaintListener := def _ {
            to paintControl(event) :void {
                hasMetrics := palette.setMetrics(event.getGc())
            }
        }
        editorShell.addPaintListener(listenerForMetrics)
        
        if (hasMetrics) {
            editorShell.removePaintListener(listenerForMetrics)
        }
        
        def fp := palette.makeFramePalette()
        editorShell.setForeground(fp.getFg())
        editorShell.setBackground(fp.getBg())
        editorShell.setFont(fp.getFont())
        
        #def statusBar := <widget:makeLabel>(editorShell, 0)
        #statusBar.setText("Causeway's internal status messages displayed here...")
        
        # menuFile
        [def doOpen,
         def doClose,
         
         def doSetSourceRoot,
         
         def doExport,
         
         def doPageSetup,
         def doPrint,
         
         def doExit]
        
        # menuSearch
        [def doFind,
         def doFindNext,
         def doFindPrevious,
         
         def doFindLostMessages,
         
         def doGoTo]
        
        # menuView
        [def doSmallerFont,
         def doLargerFont]
        
        # menuTools
        [def doDevoraOne,
         def doDevoraTwo,
         
         def doFilterOptions]
        
        # menuWindows
        [def doNextTab,
         def doPreviousTab]
        
        # menuHelp
        [def doHelpTopics,
        
         def doExamples,
         
         def doAbout]
         
        def openNewEditor(sources :String, traces :List) :void {
        
            def waitCursor := makers["cursor"](SWT.getCURSOR_WAIT())
            def oldEditorShell := causewayEditor.getEditorShell()
            def oldViewer := causewayEditor.getViewer().getTopLevelSWTControl()
            if (oldViewer != null && !oldViewer.isDisposed()) {
                oldViewer.dispose()
            }
            
            oldEditorShell.removeShellListener(editorShellListener)
            oldEditorShell.setCursor(waitCursor)
            def openAction() :void {
                def editor := makeCausewayEditor(sources, traces)
                editor.open()
                oldEditorShell.close()
                if (!oldEditorShell.isDisposed()) {
                    oldEditorShell.dispose()
                }
            }
            openAction <- run()
        }
        
        /**
         *
         */
        bind doOpen extends abstractAction(doOpen) {
            to run() :void {
                def waitCursor := makers["cursor"](SWT.getCURSOR_WAIT())
                def oldEditorShell := causewayEditor.getEditorShell()
                var optPaths :List := openners["openFile"](oldEditorShell)
                if (optPaths != []) {
                    if (rootDirName == "") {
                        doSetSourceRoot()
                    }
                    def oldViewer := 
                      causewayEditor.getViewer().getTopLevelSWTControl()
                    if (oldViewer != null && !oldViewer.isDisposed()) {
                        oldViewer.dispose()
                    }

                    oldEditorShell.removeShellListener(editorShellListener)
                    oldEditorShell.setCursor(waitCursor)
                    def openAction() :void {
                        def editor := makeCausewayEditor(rootDirName,
                                                         optPaths)
                        editor.open()
                        oldEditorShell.close()
                        if (!oldEditorShell.isDisposed()) {
                            oldEditorShell.dispose()
                        }
                    }
                    openAction <- run()
                }
            }
            to getLabel()            :String { "&Open..." }
            to getOptMenuAccelDesc() :String { "Ctrl+O" }
            to getOptTip()           :String { "Open a file" }
            to getOptIconFQName()    :String {
                "com/skyhunter/e/icons/fileOpen.gif"
            }
        }
        
        /**
         *
         */
        bind doClose extends abstractAction(doClose) {
            to run() :void {
                causewayEditor.getEditorShell().close()         
            }
            to getLabel()            :String { "&Close" }
            to getOptMenuAccelDesc() :String { "Ctrl+W" }
            to getOptTip()           :String { "Closes the editor and quits" }
        }
        
        /**
         *
         */
        bind doExport extends abstractAction(doExport) {
            to run() :void {
                def waitCursor := makers["cursor"](SWT.getCURSOR_WAIT())
                def editorShell := causewayEditor.getEditorShell()
                
                def dotFile := openners["exportFile"](editorShell,
                                                      "messageGraph.gv", [])
                
                if (dotFile != null) {
                    editorShell.setCursor(waitCursor)
                    try {
                        causewayEditor.getViewer().exportModelToDotFile(dotFile)
                    } finally {  # set cursor to default cursor
                        editorShell.setCursor(null)
                    }
                }
            }
            to getLabel()            :String { "&Export..." }
            to getOptTip()           :String {
                "Export message graph to GraphViz DOT format"
            }
        }
        
        /**
         *
         */
        bind doPageSetup extends abstractAction(doPageSetup) {
            to run() :void {
                debugln("doPageSetup()")
            }
            to getLabel()            :String { "Page Set&up..." }
            to getOptTip()           :String { "Printing preferences" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doPrint extends abstractAction(doPrint) {
            to run() :void {
                debugln("doPrint()")
            }
            to getLabel()            :String { "&Print..." }
            to getOptMenuAccelDesc() :String { "Ctrl+P" }
            to getOptTip()           :String { "Prints this file" }
            to getOptIconFQName()    :String {
                "com/skyhunter/e/icons/print16-16.gif"
            }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doExit extends abstractAction(doExit) {
            to run() :void {
                causewayEditor.getEditorShell().close()
                def exitAction() :void {
#                   rezKit.disposeAll()
                    shutdown()
                }
                exitAction <- run()
            }
            to getLabel()            :String { "E&xit" }
            to getOptMenuAccelDesc() :String { "Ctrl+Q" }
            to getOptTip()           :String { 
                "Closes editor and quits Causeway" }
        }
        
        /**
         *
         */
        bind doFind extends abstractAction(doFind) {
            to run() :void {
                debugln("doFind()")
            }
            to getLabel()            :String { "Find..." }
            to getOptMenuAccelDesc() :String { "Ctrl+F" }
            to getOptTip()           :String {
                "Find"
            }
            to getOptIconFQName()    :String {
                "com/skyhunter/e/icons/find16-16.gif"
            }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doFindNext extends abstractAction(doFindNext) {
            to run() :void {
                debugln("doFindNext()")
            }
            to getLabel()            :String { "Find &Next" }
            to getOptMenuAccelDesc() :String { "F3" }
            to getOptTip()           :String { "Find the next one" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doFindPrevious extends abstractAction(doFindPrevious) {
            to run() :void {
                debugln("doFindPrevious()")
            }
            to getLabel()            :String { "Find &Previous" }
            to getOptMenuAccelDesc() :String { "Shift+F3" }
            to getOptTip()           :String { "Find the previous one" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doFindLostMessages extends abstractAction(doFindLostMessages) {
            to run() :void {
                causewayEditor.getViewer().findLostMessages()
            }
            to getLabel()            :String { "Find Lost Messages" }
            to getOptTip()           :String { 
                return "Find messages without targets" 
            }
        }
        
        /**
         *
         */
        bind doGoTo extends abstractAction(doGoTo) {
            to run() :void {
                debugln("doGoTo()")
            }
            to getLabel()            :String { "&Go To..." }
            to getOptMenuAccelDesc() :String { "Ctrl+G" }
            to getOptTip()           :String {
                "Go to a line number"
            }
            to getOptIconFQName()    :String {
                "com/skyhunter/e/icons/goto16-16.gif"
            }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doSmallerFont extends abstractAction(doSmallerFont) {
            to run() :void {
                debugln("doSmallerFont()")
            }
            to getLabel()            :String { return "&SmallerText" }
            to getOptTip()           :String { return "Make text smaller" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doLargerFont extends abstractAction(doLargerFont) {
            to run() :void {
                debugln("doLargerFont()")
            }
            to getLabel()            :String { return "&LargerText" }
            to getOptTip()           :String { return "Make text larger" }
            to getOptIconFQName()    :String {
                return "com/skyhunter/e/icons/magnify.gif"
            }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doDevoraOne extends abstractAction(doDevoraOne) {
            to run() :void {
                debugln("doDevoraOne()")
            }
            to getLabel()            :String { "&Devora (pass 1)" }
            to getOptTip()           :String { "Run Devora filter" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doDevoraTwo extends abstractAction(doDevoraTwo) {
            to run() :void {
                debugln("doDevoraTwo()")
            }
            to getLabel()            :String { "&Devora (pass 2)" }
            to getOptTip()           :String { "Run Devora filter" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doFilterOptions extends abstractAction(doFilterOptions) {
            to run() :void {
                
                def CANCEL := 0
                def SAVE := 1
                def UPDATE_VIEWER := 2
                
                def action := causewayEditor.getViewer().showFilterOptions()
                when (action) -> {
                    if (action == UPDATE_VIEWER) {
                        causewayEditor.updateViewer()
                    }
                }
            }
            to getLabel()            :String { 
                return "&Set Filter Options..."
            }
            to getOptTip()           :String { 
                return "Set filter options" 
            }
        }
        
        /**
         *
         */
        bind doSetSourceRoot extends abstractAction(doSetSourceRoot) {
            to run() :void {
                def dir := openners["openDir"](causewayEditor.getEditorShell(),
                                               "Select the source code root directory.")
                if (dir != null) {
                    rootDirName := dir.getPath()
                }
            }
            to getLabel()            :String { 
                return "&Set Source Root..." 
            }
            to getOptTip()           :String {
                return "Set source code root directory"
            }
        }
        
        /**
         *
         */
        bind doNextTab extends abstractAction(doNextTab) {
            to run() :void {
                debugln("doNextTab()")
            }
            to getLabel()            :String { "&Next Tab" }
            to getOptMenuAccelDesc() :String { "Ctrl+Tab" }
            to getOptTip()           :String { "Bring next to top" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doPreviousTab extends abstractAction(doPreviousTab) {
            to run() :void {
                debugln("doPreviousTab()")
            }
            to getLabel()            :String { "&Previous Tab" }
            to getOptMenuAccelDesc() :String { "Shift+Ctrl+Tab" }
            to getOptTip()           :String { "Bring previous to top" }
            to everEnabledReporter() :EverReporter {
                whenever([], fn{false})
            }
        }
        
        /**
         *
         */
        bind doHelpTopics extends abstractAction(doHelpTopics) {
            to run() :void {
                def makeOnlineHelp := onlineHelpAuthor(makers["modelessDialog"],
                                                       abstractAction,
                                                       traceline)
                def onlineHelp := makeOnlineHelp(causewayEditor.getEditorShell(),
                                                 palette)
                onlineHelp.open()
            }
            to getLabel()            :String { return "Help Topics" }
            to getOptMenuAccelDesc() :String { return "F1" }
            to getOptTip()           :String { return "Online help" }
            to getOptIconFQName()    :String {
                return "com/skyhunter/e/icons/help.gif"
            }
        }
        
        /**
         *
         */
        bind doExamples extends abstractAction(doExamples) {
            to run() :void {
#               for devrune
#               def eHome := "~/e/src/esrc"

                def eHome := props["e.home"]
                
                def eHomeDir := <file>[eHome]
                
                def traces := [eHomeDir["/scripts/test/causeway/waterken/traces/live-expect3.log"]]
                def sources := eHome + "/scripts/test/causeway/waterken/sources"
                openNewEditor(sources, traces)
            }
            to getLabel()            :String { 
                return "Open Waterken Example (Ajax-style)" 
            }
            to getOptTip()           :String { 
                return "Makes new viewer for example sources and trace log" 
            }
        }
        
        /**
         *
         */
        bind doAbout extends abstractAction(doAbout) {
            to run() :void {
                def makeAboutDialog := aboutDialogAuthor(props,
                                                         makers["modelessDialog"],
                                                         abstractAction,
                                                         traceline)
                def aboutDialog := makeAboutDialog(causewayEditor.getEditorShell(),
                                                   causewayEditor.getAppName(),
                                                   palette)
                aboutDialog.open()
            }
            to getLabel()  :String {
                return `&About ${causewayEditor.getAppName()}`
            }
            to getOptTip() :String { 
                return "About Causeway and components"
            }
        }
        
        def barAction :=
          M.bar([def menuFile :=
                   M.menu("&File",
                          [doOpen,
                           doClose,
                           M.sep(),
                           doSetSourceRoot,
                           M.sep(),
                           doExport,
                           M.sep(),
                           doPageSetup,
                           doPrint,
                           M.sep(),
                           doExit]),
                 def menuSearch :=
                   M.menu("Sea&rch",
                          [doFind,
                           doFindNext,
                           doFindPrevious,
                           M.sep(),
                           doFindLostMessages,
                           M.sep(),
                           doGoTo]),
                 def menuView :=
                   M.menu("&View",
                          [doSmallerFont,
                           doLargerFont]),
                 def menuTools :=
                   M.menu("&Tools",
                          [doDevoraOne,
                           doDevoraTwo,
                           M.sep(),
                           doFilterOptions]),
                 def menuWindow :=
                   M.menu("&Window",
                          [doNextTab,
                           doPreviousTab]),
                 def menuHelp :=
                   M.menu("&Help",
                          [doHelpTopics,
                           M.sep(),
                           doExamples,
                           M.sep(),
                           doAbout])])
        
        def menuMap := [].asMap().diverge()
        
        def viewerDirectorAuthor :=
          <import:org.erights.e.tools.causeway.viewerDirectorAuthor>
        def makeViewerDirector :=
          viewerDirectorAuthor(rootDirName,
                               <file>, <jar>, props,
                               makers, editorShell, abstractAction,
                               tcr, traceline)
        
        def viewerDirector := makeViewerDirector(editorShell,
                                                 palette,
                                                 traces)
        
        bind causewayEditor {
        
            to getAppName() :String { return "Causeway" }
            
            to getEditorShell() :Shell { return editorShell }
            
            to getViewer() :near { return viewerDirector.getView() }
            
            to layout() :void {
            
                causewayEditor.getViewer().layout()
                
                def swtTopView := 
                      causewayEditor.getViewer().getTopLevelSWTControl()
                def topViewSize := swtTopView.getSize()
                
#                traceline(`topViewSize: $\
#${topViewSize.getX()}, $\
#${topViewSize.getY()}`)
                
                def es := causewayEditor.getEditorShell()
                
                swtGrid`$es:
                        $swtTopView.X.Y`
                        
#                      ${causewayEditor.getStatusBar()}.X`
                
                if (topViewSize.getX() > 0 || topViewSize.getY() > 0) {
                    es.pack()
                    swtTopView.setSize(topViewSize.getX(), topViewSize.getY())
                    es.setSize(topViewSize.getX(), topViewSize.getY())
                }

                es.layout(true)  # flushes layout caches
            }

            to updateViewer() :void {
                
                def es := causewayEditor.getEditorShell()
                
                def waitCursor := makers["cursor"](SWT.getCURSOR_WAIT())
                es.setCursor(waitCursor)
                
                def oldViewer := causewayEditor.getViewer().getTopLevelSWTControl()
                if (oldViewer != null && !oldViewer.isDisposed()) {
                    oldViewer.dispose()
                }
                
                viewerDirector.updateView(es)
                
                causewayEditor.layout()
                
                es.setCursor(null)
            }
            
            /**
             *
             */
            to open() :void {
            
                causewayEditor.layout()
                
                def es := causewayEditor.getEditorShell()
                
                def menuBar := barAction.makeMenu(es, menuMap)
                
                es.setText(`${causewayEditor.getAppName()}`)
                
                es.open()
                
                causewayEditor.getViewer().open()
            }
        }
        return causewayEditor
    }
    return makeCausewayEditor
}
