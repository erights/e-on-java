#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2008 Teleometry Design under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def swt__uriGetter := <import:org.eclipse.swt.*>
def widget__uriGetter := <swt:widgets.*>
def custom__uriGetter := <swt:custom.*>
def layout__uriGetter := <swt:layout.*>
def SWT := <swt:makeSWT>

def makeLamportSlot := <elib:slot.makeLamportSlot>
def whenever := <elib:slot.whenever>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def makeOutlineView := <import:org.erights.e.tools.causeway.makeOutlineView>
def makeTextView := <import:org.erights.e.tools.causeway.makeTextView>

# [[start-line, start-col], [end-line, end-col]]
def SourceSpan := Tuple[Tuple[int,int], Tuple[int, int]]

# [filename, fncname]
def SourceName := Tuple[String, String]

# A [source-name, source-span]
def StackEntry := Tuple[SourceName, nullOk[SourceSpan]]

# top-to-bottom list of stack entries
def Stack := List[StackEntry]

# refactor to consolidate definitions
def getDisplayName(vatName) :String {
    if (vatName =~ `<Vat @vn>`) {
        if (vn =~ `@_/-/@name`) {
            return name
        } else {
            return vn
        }
    }
    # find most specific folder name
    def parts := vatName.split("/")
    var i := parts.size() -1
    while (i >= 0) {
        def part := parts[i]
        if (part != "") { return part }
        i -= 1
    }
    return vatName
}

def getText(file) :String {
    if (!(file.__respondsTo("exists",0)) || file.exists()) {
        file.getText()
    } else {
        `*** "${file.getPath()}" not found ***`
    }
}

def stackWalkerAuthor(var rootDirName, <file>, <jar>, makers, traceline) :near {
    
    if (!(rootDirName.endsWith("/"))) {
        rootDirName += "/"
    }

    /**
     * Returns either a java.io.File or a java.net.URL
     */
    def getFile(pathname) :any {
        switch (pathname) {
            match `file:@body` {
                return <file>[body]
            }
            match `jar:@body` {
                return <jar>[body]
            }
            match _ {
                return <file>[rootDirName + pathname]
            }
        }
    }
    
    def getOptLine(file,
                   first :int,
                   fo :int,
                   last :int,
                   lo :int) :nullOk[String] {
        if (!(file.__respondsTo("exists",0)) || file.exists()) {
            def source := file.getText()
            def lines := source.split("\n")
            if (first <= lines.size()) {
                return lines[first -1].trim()
            }
        }
        return null
    }
    
    def getLine(file, first :int, fo :int, last :int, lo :int) :String {
        if (getOptLine(file, first, fo, last, lo) =~ result :notNull) {
            return result
        } else {
            return `*** "${file.getPath()}" not found ***`
        }
    }
    
    def getOptMessage(se :StackEntry) :nullOk[String] {
        if (se =~ [[pathname, _], [[first, fo], [last, lo]]]) {
            if (pathname != "" ) {
                def optResult := getOptLine(getFile(pathname),
                                            first,
                                            fo,
                                            last,
                                            lo)
                if (null != optResult) {
                    return optResult
                }
            }
        }
        if (se =~ [[_, var topFnc], _]) {
            if (topFnc != "") {
                var result := ""
                while (topFnc =~ rx`(@firstPart.*)\$$[0-9]*(@lastPart.*)`) {
                    result := `$lastPart.$result`
                    topFnc := firstPart
                }
                result := `$topFnc.$result`
                if (result.endsWith(".")) {
                    return result(0,result.size()-1)
                } else {
                    return result
                }
            }
        }
        return "..."
    }
    
    def getEntryLabel(element, entryIndex :int) :String {
        var result := ""
        if (element.isNode()) {
            def [vatName, turn] := element.getID()
            result := `[${getDisplayName(vatName)}, $turn] `
        }
        def optText := element.getOptText()
        if (entryIndex == 0 && null != optText) {
            result += `# $optText` 
        } else {
            def stack := element.getContext()[1]
            if (stack.size() > entryIndex) {
                if (getOptMessage(stack[entryIndex]) =~ msg :notNull) {
                    result += msg
                }
            }
        }
        if (result == "") {
            result := "??"
        }
        return result
    }

    def makeStackWalker(swtParent, palette,
                        abstractAction,
                        selectionModel, vatMap) :near {
        
        def swtStackWalkerView := <widget:makeComposite>(swtParent, 0)
        
        def fldrPalette := palette. makeFolderPalette()

        swtStackWalkerView.setForeground(fldrPalette.getFg())
        swtStackWalkerView.setBackground(fldrPalette.getBg())
        swtStackWalkerView.setFont(fldrPalette.getFont())

        def swtSideToSide := <custom:makeSashForm>(swtStackWalkerView,
                                                   SWT.getHORIZONTAL())
        
        def swtStackView := <widget:makeComposite>(swtSideToSide, 0)
        swtStackView.setForeground(fldrPalette.getFg())
        swtStackView.setBackground(fldrPalette.getBg())
        swtStackView.setFont(fldrPalette.getFont())

        def getOutlineActionTargets
        def outlineView := makeOutlineView(swtStackView, palette,
                                           abstractAction, 
                                           getOutlineActionTargets)

        def swtStackFolder := <widget:makeTabFolder>(swtStackView, 0)
        swtStackFolder.setForeground(fldrPalette.getFg())
        swtStackFolder.setBackground(fldrPalette.getBg())
        swtStackFolder.setFont(fldrPalette.getFont())

        def swtDescription := <widget:makeTabItem>(swtStackFolder, 0)

        def swtStackPane := <widget:makeComposite>(swtStackFolder,
                                                   SWT.getBORDER())
        
        def swtStackExplorer := <widget:makeTree>(swtStackPane,
                                                  SWT.getSINGLE() |
                                                    (SWT.getH_SCROLL() |
                                                       SWT.getV_SCROLL()))

        def stkPalette := palette.makeStackPalette()
        swtStackPane.setForeground(stkPalette.getFg())
        swtStackPane.setBackground(stkPalette.getBg())
        swtStackPane.setFont(stkPalette.getFont())
        swtStackExplorer.setForeground(stkPalette.getFg())
        swtStackExplorer.setBackground(stkPalette.getBg())
        swtStackExplorer.setFont(stkPalette.getFont())

        swtDescription.setControl(swtStackPane)
        swtDescription.setText("Stack Explorer")
        swtStackFolder.setSelection(swtStackFolder.indexOf(swtDescription))

        def swtSourceView := <widget:makeComposite>(swtSideToSide, 0)
        swtSourceView.setForeground(fldrPalette.getFg())
        swtSourceView.setBackground(fldrPalette.getBg())
        swtSourceView.setFont(fldrPalette.getFont())

        def getTextActionTargets
        def textView := makeTextView(swtSourceView, palette,
                                     abstractAction, getTextActionTargets)

        def swtSourceFolder := <widget:makeTabFolder>(swtSourceView, 0)
        swtSourceFolder.setForeground(fldrPalette.getFg())
        swtSourceFolder.setBackground(fldrPalette.getBg())
        swtSourceFolder.setFont(fldrPalette.getFont())

        def swtFilename := <widget:makeTabItem>(swtSourceFolder, 0)

        def swtSourcePane := <widget:makeComposite>(swtSourceFolder,
                                                    SWT.getBORDER())
        
        def swtSourceCode := <custom:makeStyledText>(swtSourcePane,
                                                     SWT.getH_SCROLL() |
                                                       SWT.getV_SCROLL())

        def srcPalette := palette.makeSourcePalette()
        swtSourcePane.setForeground(srcPalette.getFg())
        swtSourcePane.setBackground(srcPalette.getBg())
        swtSourcePane.setFont(srcPalette.getFont())
        swtSourceCode.setForeground(srcPalette.getFg())
        swtSourceCode.setBackground(srcPalette.getBg())
        swtSourceCode.setFont(srcPalette.getFont())

        swtFilename.setControl(swtSourcePane)
        swtFilename.setText("")
        swtSourceFolder.setSelection(swtSourceFolder.indexOf(swtFilename))
        
        swtSideToSide.setWeights([35, 65])
        
        # strip crs
        swtSourceCode.addVerifyListener(def verifyListener {
            to verifyText(event) :void {
                event.setText(event.getText().canonical())
            }
        })
        
        def &everDirty := makeLamportSlot(false)
        swtSourceCode.addExtendedModifyListener(def eml {
            to modifyText(_) :void { everDirty := true }
        })
        
        def &everWordWrap := makeLamportSlot(false)
        whenever([&everWordWrap], fn{
            swtSourceCode.setWordWrap(everWordWrap)
        }, fn{
            ! swtSourceCode.isDisposed()
        })
        
        swtSourceCode.setEditable(false)
        
        def showAndSelect(file, pathname, first, fo, last, lo) :void {

            swtFilename.setText(`$pathname  line: $first`)
            swtSourceCode.setText(getText(file))
            
            # Get the number of lines.
            def lineCount := swtSourceCode.getLineCount()
            
            def lineAtBottom
            if (last + 5 < lineCount) {
                bind lineAtBottom := last + 5
            } else {
                bind lineAtBottom := lineCount
            }
            
            # Scroll the specified offset into view.
            swtSourceCode.setSelection(
              swtSourceCode.getOffsetAtLine(lineAtBottom -1))
            
            # Now do the real selection.
            if (first <= lineCount && last <= lineCount) {
                def line1 := swtSourceCode.getOffsetAtLine(first -1)
                def line2 := swtSourceCode.getOffsetAtLine(last -1)
                swtSourceCode.setSelection(line1 + fo, line2 + lo +1)
            }
        }
        
        # Useful map for lookup in event handling.
        var itemToModelMap := [].asMap().diverge()
        
        def buildTreeItem(swtParent, vatMap, 
                          element, entryIndex :int) :near {
            def swtItem := <widget:makeTreeItem>(swtParent, 0)
            def entries := element.getContext()[1]
            if (entries.size() > entryIndex) {
                var se := entries[entryIndex]
                if (se[1] == null) {
                    se := [se[0], [[1,0],[1,0]]]
                }
                itemToModelMap.put(swtItem, se, true)
            }
            swtItem.setText(getEntryLabel(element, entryIndex))

            def [ov, ot] := element.getOrigin().getID()
            # [vatDisplayName, [vatColor, colorName]]
            def oattr := vatMap.fetchDisplayAttributes(ov)
            swtItem.setForeground(oattr[1][0])
            return swtItem
        }
        
        def showStack(element, vatMap) :void {
            def origin := element.getOrigin()
            def [ov, ot] := origin.getID()
            # [vatDisplayName, [vatColor, colorName]]
            def oattr := vatMap.fetchDisplayAttributes(ov)
            
            # Remove stack entry items from tree widget.
            swtStackExplorer.removeAll()
            
            itemToModelMap := [].asMap().diverge()
            
            # Clear source filename label and source code text pane.
            swtFilename.setText("")
            swtSourceCode.setText("")
            
            var curElement := element
            while (null != curElement) {
                def swtOptItem := buildTreeItem(swtStackExplorer, vatMap,
                                                curElement, 0)
                def stackSize := curElement.getContext()[1].size()
                for i in 1..!stackSize {
                    buildTreeItem(swtOptItem, vatMap,
                                  curElement, i)
                }
                def curOrigin := curElement.getOrigin()
                if (curOrigin != curElement) {
                    def oStackSize := curOrigin.getContext()[1].size()
                    for j in 0..!oStackSize {
                        buildTreeItem(swtOptItem, vatMap,
                                      curOrigin, j)
                    }
                }
                
                if (curOrigin.getIncomingCount() >= 1) {
                    # walk back along last element added
                    curElement := curOrigin.getNextIn()
                } else {
                    curElement := null
                }
            }
            if (swtStackExplorer.getItemCount() > 0) {
                
                def swtItems := swtStackExplorer.getItems()
                
                swtStackExplorer.setSelection([swtItems[0]])
                swtStackExplorer.showItem(swtItems[0])
                
                def mm := itemToModelMap.fetch(swtItems[0], fn{})
                if (mm =~ [[pathname, _], [[first, fo], [last, lo]]]) {
                    showAndSelect(getFile(pathname),
                                  pathname,
                                  first,
                                  fo,
                                  last,
                                  lo)
                }
            }
        }
        
        def selectionListener {
            to widgetSelected(event) :void {
                def item := event.getItem()
                if (itemToModelMap.fetch(item, fn{}) =~
                      [[pathname, _], [[first, fo], [last, lo]]]) {
                    
                    showAndSelect(getFile(pathname),
                                  pathname,
                                  first,
                                  fo,
                                  last,
                                  lo)
                }
            }
            to widgetDefaultSelected(event) :void {}
        }
        swtStackExplorer.addSelectionListener(selectionListener)
        
        def selectionObserver {
            to elementSelected(optElement) :void {
                if (optElement != null) {
                    showStack(optElement, vatMap)
                }
            }
        }
        selectionModel.addObserver(selectionObserver)
        
        bind getOutlineActionTargets(action :String) :List {
            if (action == "doExpand" || action == "doCollapse") {
                if (swtStackExplorer.getItemCount() > 0) {
                    return [swtStackExplorer]
                } else {
                    return null
                }
            }
            if (action == "doIncreaseFontSize" ||
                  action == "doDecreaseFontSize") {
                return [swtStackExplorer]
            }
            return null
        }
        
        bind getTextActionTargets(action :String) :List {
            if (action == "doIncreaseFontSize" ||
                  action == "doDecreaseFontSize") {
                return [swtSourceCode]
            }
            return null
        }
        
        def stackWalker {
            
            to open() :void {}
            
            to layout() :void {
                
                outlineView.layout()
            
                swtGrid`${swtStackPane}:
                        ${swtStackExplorer}.X.Y`
            
                palette.zeroMargins(swtStackPane.getLayout())

                swtGrid`${swtStackView}:
                    ${outlineView.getTopLevelPane()}.X
                    ${swtStackFolder}.X.Y`
                
                palette.setMargins(
                    swtStackView.getLayout(), 2, 0, 0, 2)
                
                textView.layout()

                swtGrid`${swtSourcePane}:
                        ${swtSourceCode}.X.Y`
            
                palette.zeroMargins(swtSourcePane.getLayout())
                
                swtGrid`${swtSourceView}:
                    ${textView.getTopLevelPane()}.X
                    ${swtSourceFolder}.X.Y`
                
                palette.setMargins(
                    swtSourceView.getLayout(), 2, 0, 0, 2)
                
                swtGrid`${swtStackWalkerView}:
                        ${swtSideToSide}.X.Y`
            }
            
            to getElementLabel(element) :nullOk[String] {
                return getEntryLabel(element, 0)
            }
            
            to labelItem(vatMap, element, swtItem) :void {
                def oVatName := element.getOrigin().getID()[0]
                def oAttr := vatMap.fetchDisplayAttributes(oVatName)
                swtItem.setForeground(oAttr[1][0])
                var msg := getEntryLabel(element, 0)
                swtItem.setText(msg)
            }
        }
        return stackWalker
    }
    return makeStackWalker
}

