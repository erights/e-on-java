#!/usr/bin/env rune

# Copyright 2004 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def makeVerbFacet(kind :String, recipient, verb, caller) :near {

    /**
     * A facet-function on some underlying object for sending only messages
     * with a given verb (message selector) to that underlying object.
     * <p>
     * For example, '<tt>foo.bar</tt>' results in a function such that
     * '<tt>(foo.bar)(args...)</tt>' invokes '<tt>foo.bar(args...)</tt>'.
     */
    def verbFacet {
        to __printOn(out) :void {
            out.print(`<$kind ${E.toQuote(verb)} facet>`)
        }

        match [`run`, args] {
            caller(recipient, verb, args)
        }
        match [`__respondsTo`, [`run`, arity]] {
            recipient.__respondsTo(verb, arity)
        }
        match [`__getAllegedType`, []] {
            def oldMsgs := recipient.__getAllegedType().getMessageTypes()
            var newMsgs := []
            for oldMsg in oldMsgs {
                if (oldMsg.getVerb() =~ `$verb`) {
                    newMsgs with= __makeMessageDesc(oldMsg.getDocComment(),
                                                    "run",
                                                    oldMsg.getParams(),
                                                    oldMsg.getOptResultGuard())
                }
            }
            __makeProtocolDesc("",
                               `${meta.context().getFQNPrefix()}Sub__T`,
                               [],
                               [],
                               newMsgs)
        }
    }
    return verbFacet
}

def callCaller(recipient, verb, args) :any {
    return E.call(recipient, verb, args)
}

def sendCaller(recipient, verb, args) :any {
    return E.send(recipient, verb, args)
}

/**
 * Used in the expansion of "foo.bar" so that "(foo.bar)(...)" means the same
 * thing as "foo.bar(...)".
 * <p>
 * Likewise used in the expansion of "foo &lt;- bar" so that
 * "(foo &lt;- bar)(...) means the same thing as "foo &lt;- bar(...)".
 * <p/>
 * The result should be a function which responds to "run" with any number
 * of arguments by calling the corresponding "bar" method on the "foo"
 * object. Inspired by the <a href="http://www.waterken.com"
 * >web-calculus</a>, this is a cheap notation for forming a bar-only
 * unforseen-facet (a filtering forwarder, sort-of) on the "foo" object.
 */
def __makeVerbFacet0 {
    to curryCall(recipient, verb :String) :near {
        return makeVerbFacet("calling",
                             recipient,
                             verb,
                             callCaller)
    }
    to currySend(recipient, verb :String) :near {
        def sendSpreader(args) :any {
            return E.send(recipient, verb, args)
        }
        return makeVerbFacet("sending",
                             recipient,
                             verb,
                             sendCaller)
    }
}
