#!/usr/bin/env rune

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def eLauncherAuthor := <elang:launcher.eLauncherAuthor>

/**
 *
 */
def e_awtLauncherAuthor {

    /**
     *
     */
    to getHelp(_) :String {
        return `$\
The <fname> specifies source code in the E language for an AWT app.
    -.e-awt                   Read (non-interactively by default) from standard
                              input.
    <fbase>.e-awt             Read (non-interactively by default) from the
                              named file.
    --src.e-awt <src>         Read (non-interactively by default) from the
                              <src> text.
The script will be run in an AWT Runner, and so can call AWT objects.

E flag options (default to false; option without value sets flag to true):
    --interact                Interactive mode prompts, prints each result, and
                              survives top-level thrown exceptions.
    --confine                 Each top level expr is evaluated in the safe
                              scope rather than the privileged scope, just as
                              *.emaker files are.
    --explicitIO              Output sent to stdout and stderr is gathered and
                              shown in answer blocks like "# stdout: foo".
Other E options:
    --fqnPrefix=<fqnPrefix>   The "package" context for naming behaviors in the
                              script.
`
    }

    /**
     * @return null
     */
    to getOptVersionText(props) :void { return null }

    /**
     *
     */
    to run(auths) :near {

        def eLauncher := eLauncherAuthor(auths)

        /**
         *
         */
        def e_awtLauncher {

            /**
             *
             */
            to run(props, var options, fname, args) :vow[boolean] {
                options with= ("--runnerKind", "awt")
                return eLauncher(props, options, fname, args)
            }

            /**
             *
             */
            to interpret(props, var options, src, args) :vow[boolean] {
                options with= ("--runnerKind", "awt")
                return eLauncher.interpret(props, options, src, args)
            }
        }
    }
}
