#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2003 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def AtomicExpr     := <type:org.erights.e.elang.evm.AtomicExpr>
def EExpr          := <type:org.erights.e.elang.evm.EExpr>
def EMatcher       := <type:org.erights.e.elang.evm.EMatcher>
def EMethod        := <type:org.erights.e.elang.evm.EMethod>
def ENode          := <type:org.erights.e.elang.evm.ENode>
def EScript        := <type:org.erights.e.elang.evm.EScript>
def GuardedPattern := <type:org.erights.e.elang.evm.GuardedPattern>
def ListPattern    := <type:org.erights.e.elang.evm.ListPattern>
def ObjectExpr     := <type:org.erights.e.elang.evm.ObjectExpr>
def Pattern        := <type:org.erights.e.elang.evm.Pattern>
def StaticContext  := <type:org.erights.e.elang.scope.StaticContext>
def Term           := <type:org.quasiliteral.term.Term>

/**
 * Convert from the ENode form of a Kernel-E AST to the corresponding
 * term-tree.
 * <p>
 * If the original AST has quasi-holes, this will convert these to hole
 * descriptions of the form expected by holePuncher. The termE__quasiParser
 * makes use of this fact.
 * <p>
 * The term-trees produced by this should agree with the description in
 * kernel-e.schema, but they don't agree yet.
 *
 * @author Mark S. Miller
 * @see holePuncher
 * @see termE__quasiParser
 */
def makeConvertENode2Term() :any {

    def convert

    def guardPatt {
        to run(functor :Term,
               noun :AtomicExpr,
               optGuard :nullOk[EExpr]) :Term {
            # XXX Deal with noun as quasi
            def varName := noun.asNoun().getName()
            def result := term`$functor($varName)`
            return guardPatt(result, optGuard)
        }
        to run(result :Term, optGuard :nullOk[EExpr]) :Term {
            if (null == optGuard) {
                return result
            } else {
                return term`guardP($result,
                                   ${convert(optGuard)})`
            }
        }
    }

    def visitor {

        to visitAssignExpr(optOriginal :nullOk[ENode],
                           noun :AtomicExpr,
                           rValue :EExpr) :Term {
            return term`assign(${convert(noun)},
                               ${convert(rValue)})`
        }

        to visitCallExpr(optOriginal :nullOk[ENode],
                         recip :EExpr,
                         verb :String,
                         args :List[EExpr]) :Term {
            return term`call(${convert(recip)},
                             $verb,
                             [${convert(args)}*])`
        }

        to visitDefineExpr(optOriginal :nullOk[ENode],
                           patt :Pattern,
                           optEjectorExpr :nullOk[EExpr],
                           rValue :EExpr) :Term {
            if (null == optEjectorExpr) {
                return term`def(${convert(patt)},
                                ${convert(rValue)})`
            } else {
                return term`def(${convert(patt)},
                                ${convert(optEjectorExpr)},
                                ${convert(rValue)})`
            }
        }

        to visitEscapeExpr(optOriginal :nullOk[ENode],
                           hatch :Pattern,
                           body :EExpr,
                           optArgPattern :nullOk[Pattern],
                           optCatcher :nullOk[EExpr]) :Term {
            if (null == optArgPattern) {
                return term`escape(${convert(hatch)},
                                   ${convert(body)})`
            } else {
                return term`escape(${convert(hatch)},
                                   ${convert(body)},
                                   ${convert(optArgPattern)},
                                   ${convert(optCatcher)})`
            }
        }

        to visitHideExpr(optOriginal :nullOk[ENode],
                         body :EExpr) :Term {
            return term`hide(${convert(body)})`
        }

        to visitIfExpr(optOriginal :nullOk[ENode],
                       test :EExpr,
                       then :EExpr,
                       els :EExpr) :Term {
            return term`if(${convert(test)},
                           ${convert(then)},
                           ${convert(els)})`
        }

        to visitLiteralExpr(optOriginal :nullOk[ENode],
                            data) :Term {
            return term`quote($data)`
        }

        to visitNounExpr(optOriginal :nullOk[ENode],
                         varName :String) :Term {
            return term`noun($varName)`
        }


        to visitObjectExpr(optOriginal :nullOk[ENode],
                           docComment :String,
                           oName :GuardedPattern,
                           auditors :List[EExpr],
                           eScript :EScript) :Term {
            require(null == oName.getOptGuardExpr(),
                    fn{`Can't guard object definition variable: $oName`})
            return term`object($docComment,
                               ${convert(oName)},
                               [${convert(auditors)}*],
                               ${convert(eScript)})`
        }

        to visitMetaStateExpr(optOriginal :nullOk[ENode]) :Term {
            return term`metaState`
        }

        to visitMetaContextExpr(optOriginal :nullOk[ENode]) :Term {
            return term`metaContext`
        }

        to visitSeqExpr(optOriginal :nullOk[ENode],
                        subs :List[EExpr]) :Term {
            return term`seq([${convert(subs)}*])`
        }

        to visitSlotExpr(optOriginal :nullOk[ENode],
                         noun :AtomicExpr) :Term {
            # XXX Deal with noun as quasi
            def varName := noun.asNoun().getName()
            return term`slot($varName)`
        }

        to visitCatchExpr(optOriginal :nullOk[ENode],
                          attempt :EExpr,
                          patt :Pattern,
                          catcher :EExpr) :Term {
            return term`catch(${convert(attempt)},
                              ${convert(patt)},
                              ${convert(catcher)})`
        }

        to visitFinallyExpr(optOriginal :nullOk[ENode],
                            attempt :EExpr,
                            unwinder :EExpr) :Term {
            return term`finally(${convert(attempt)},
                                ${convert(unwinder)})`
        }


        to visitQuasiLiteralExpr(optOriginal :nullOk[ENode],
                                 index :int) :Term {
            return term`.DollarHole.($index)`
        }

        to visitQuasiPatternExpr(optOriginal :nullOk[ENode],
                                 index :int) :Term {
            return term`.AtHole.($index)`
        }

        /***************************** Patterns *************************/


        to visitFinalPattern(optOriginal :nullOk[ENode],
                             nounExpr :AtomicExpr,
                             optGuardExpr :nullOk[EExpr]) :Term {
            return guardPatt(term`finalP`, nounExpr, optGuardExpr)
        }

        to visitVarPattern(optOriginal :nullOk[ENode],
                           nounExpr :AtomicExpr,
                           optGuardExpr :nullOk[EExpr]) :Term {
            return guardPatt(term`varP`, nounExpr, optGuardExpr)
        }

        to visitSlotPattern(optOriginal :nullOk[ENode],
                            nounExpr :AtomicExpr,
                            optGuardExpr :nullOk[EExpr]) :Term {
            return guardPatt(term`slotP`, nounExpr, optGuardExpr)
        }

        to visitIgnorePattern(optOriginal :nullOk[ENode],
                              optGuardExpr :nullOk[EExpr]) :Term {
            return guardPatt(term`ignoreP`, optGuardExpr)
        }

        to visitViaPattern(optOriginal :nullOk[ENode],
                           viaExpr :EExpr,
                           subPattern :Pattern) :Term {
            return term`viaP(${convert(viaExpr)},
                             ${convert(subPattern)})`
        }

        to visitListPattern(optOriginal :nullOk[ENode],
                            subs :List[Pattern]) :Term {
            return term`listP([${convert(subs)}*])`
        }

        to visitQuasiLiteralPatt(optOriginal :nullOk[ENode],
                                 index :int) :Term {
            return term`.DollarHole.($index)`
        }

        to visitQuasiPatternPatt(optOriginal :nullOk[ENode],
                                 index :int) :Term {
            return term`.AtHole.($index)`
        }

        /***************************** Other *************************/


        to visitEScript(optOriginal :nullOk[ENode],
                        optMethods :nullOk[List[EMethod]],
                        matchers :List[EMatcher]) :Term {
            if (null == optMethods) {
                require(1 == matchers.size(),
                        "Plumbing must have exactly one matcher")
                def [matcher] := matchers
                return convert(matcher)
            } else {
                return term`dispatch([${convert(optMethods)}*],
                                     [${convert(matchers)}*])`
            }
        }

        to visitEMethod(optOriginal :nullOk[ENode],
                        docComment :String,
                        verb :String,
                        patterns :List[Pattern],
                        optResultGuard :nullOk[EExpr],
                        body :EExpr) :Term {
            if (null == optResultGuard) {
                return term`method($docComment,
                                   $verb,
                                   [${convert(patterns)}*],
                                   ${convert(body)})`
            } else {
                return term`method($docComment,
                                   $verb,
                                   [${convert(patterns)}*],
                                   ${convert(optResultGuard)},
                                   ${convert(body)})`
           }
        }

        to visitEMatcher(optOriginal :nullOk[ENode],
                         pattern :Pattern,
                         body :EExpr) :Term {
            return term`matcher(${convert(pattern)},
                                ${convert(body)})`
        }
    }

    /**
     * Enables this visitor to be invoked as a convert function.
     * <p><ul>
     * <li>If optENode is null, return term`null`.
     * <li>If optENode is an ENode, return a corresponding Term.
     * <li>If optENode is an List[ENode], return a correspoding List[Term]
     * </ul>
     */
    bind convert(optENode) :any {
        switch (optENode) {
            match ==null          { return term`null` }
            match eNode :ENode    {
                def result := eNode.welcome(visitor)
                return result.withOptSpan(eNode.getOptSpan())
            }
            match eNodes :List[ENode] {
                var result := []
                for eNode in eNodes {
                    result with= (convert(eNode))
                }
                return result
            }
        }
    }
    return convert
}
