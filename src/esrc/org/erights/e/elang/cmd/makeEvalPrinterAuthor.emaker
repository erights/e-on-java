# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def EExpr := <type:org.erights.e.elang.evm.EExpr>
def Expr := any[EExpr, Twine, <type:org.quasiliteral.term.Term>]
def Throwable := <type:java.lang.Throwable>

def cmdMakerMaker := <elang:cmd.cmdMakerMaker>


def makeEvalPrinterAuthor(systemGC,
                          metaout :TextWriter,
                          metaerr :TextWriter) :any {

    def cmdLoopMaker := <elang:cmd.cmdLoopMakerAuthor>(systemGC)

    def makeEvalPrinter(makeEvalContext,
                        args :List,
                        props :Map[String,String],
                        isInteractive :boolean) :any {

        def cmdLoop
        def evalContext := makeEvalContext(props, cmdLoop)
        bind cmdLoop := cmdLoopMaker(args,
                                     props,
                                     evalContext.getTopScope(),
                                     isInteractive)
        def cmdMaker := cmdMakerMaker(cmdLoop,
                                      evalContext.getOptAltoutBuf(),
                                      evalContext.getOptAlterrBuf(),
                                      metaout,
                                      metaerr)

        /**
         * Implements {@link makeVat$EvalPrinter}
         */
        def evalPrinter {

            /**
             * Schedules sourceCode to be evaluated as the next top level
             * command in the evaluator's current scope, and returns a
             * vow for an exit status.
             *
             * @param expr is either a Twine (to be parsed) or an
             *        Expanded-E parse tree.
             * @return Once expr is evaluated, the returned vow will resolve
             *         to false, true, or broken; in order to indicate what the
             *         repl should do next.
             */
            to evalPrint(expr :Expr) :vow[boolean] {
                def [exitStatusVow, cmd] := cmdMaker.makeCmdAnswerer(expr)
                if (cmdLoop.enqueue(cmd)) {
                    exitStatusVow
                } else {
                    cmdLoop.getFinalExitStatusVow()
                }
            }

            /**
             *
             */
            to reportReadProblem(readProblem :Throwable) :vow[boolean] {
                cmdMaker.reportProblem(readProblem)
                if (! cmdLoop.getInteractive()) {
                    # non-interactive errors are fatal.
                    cmdLoop.exitAtTop(readProblem)
                }
                cmdLoop.getNextExitStatus()
            }

            /**
             *
             */
            to getCmdLoop() :any { cmdLoop }
        }
    }
}
