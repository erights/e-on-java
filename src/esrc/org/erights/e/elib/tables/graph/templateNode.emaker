#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2003 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def templateGraphElement := <elib:tables.graph.templateGraphElement>

/**
 * <tt>templateNode</tt> makes a node object for a directed graph.
 *
 * @param self A derived node object.
 * @param id A unique identifier for this node.
 * @return A base node object.
 * @author Terry Stanley
 * @author Mark S. Miller
 */
def templateNode(self, id) :near {
    
    def baseNode extends templateGraphElement(self) {
        
        to isNode() :boolean { return true }
        
        to getID() :any { return id }
        
        /**
         * <tt>outs</tt> iterates through the outgoing circular list,
         * invoking the function on each target.
         * <p>
         * Each outgoing edge is used as the key, and its target is used as
         * the value.
         */
        to outs() :any {
            def iterOuts {
                to iterate(func) :void {
                    var ge := self.getPrevOut()
                    while (ge != self) {
                        func(ge, ge.getTarget())
                        ge := ge.getPrevOut()
                    }
                }
            }
        }
        
        /**
         * <tt>ins</tt> iterates through the incoming circular list,
         * invoking the function on each origin.
         * <p>
         * Each incoming edge is used as a key, and its origin is used as the
         * value.
         */
        to ins() :any {
            def iterIns {
                to iterate(func) :void {
                    var ge := self.getPrevIn()
                    while (ge != self) {
                        func(ge, ge.getOrigin())
                        ge := ge.getPrevIn()
                    }
                }
            }
        }
        
        to getOutgoingCount() :int {
            var count := 0
            for _ in self.outs() {
                count += 1
            }
            return count
        }
        
        to getIncomingCount() :int {
            var count := 0
            for _ in self.ins() {
                count += 1
            }
            return count
        }
        
        to isRoot() :boolean {
            return self.getPrevIn() == self && self.getNextIn() == self
        }
    }
    return baseNode
}
