#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2004 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def Slot := <type:org.erights.e.elib.slot.Slot>

def makeLazySlot(var maker) :Slot {
    # We set maker to null when done, so make sure it isn't null
    # at the start or we'll get confused.
    require(maker != null)

    var getter := null

    def firstGetter() :any {
        def v
        getter := fn{ v }
        try {
          bind v := maker()
          maker := null
        } catch p {
          maker := null
          getter := Ref.broken(p)
          v__Resolver.resolve(getter, false)
          throw(p)
        } finally {
            if (maker != null) {
                getter := Ref.broken("nonlocal exit by lazy slot's maker")
                v__Resolver.resolve(getter, false)
            }
        }
        return v
    }
    getter := firstGetter

    def lazySlot implements Slot {
        to get()    :any { return getter() }
        to put(_)  :void { throw("this lazy Slot may not be changed") }

        /**
         * Once it's forced, it's final.
         */
        to isFinal() :boolean { return true }

        /**
         * A lazySlot is read-only, and so returns itself.
         */
        to readOnly() :Slot { return lazySlot }
    }
    return lazySlot
}

  ? pragma.syntax("0.9")

  ? def makeLazySlot := <import:org.erights.e.elib.slot.makeLazySlot>
  # value: <makeLazySlot>

  ? # Normal
  > def &foo := makeLazySlot(fn { println("foof"); "food" })
  # value: <lazySlot>

  ? (&foo).isFinal()
  # value: true

  ? (&foo).put("mood")
  # problem: this lazy Slot may not be changed

  ? foo
  # stdout: foof
  #         

  # value: "food"

  ? foo
  # value: "food"

  ? # Throwing by maker
  > def &bar := makeLazySlot(fn { println("barn"); throw("bare") })
  # value: <lazySlot>

  ? bar
  # stdout: barn
  #         

  # problem: bare

  ? bar
  # problem: bare

  ? # Ejecting by maker
  > def baz
  > escape out {
  >     bind baz := makeLazySlot(fn { out("bass") })
  >     baz.get()
  > }
  # value: "bass"

  ? baz.get()
  # problem: nonlocal exit by lazy slot's maker

  ? # A maker that returns a promise:

  ? def x
  ? def &y := makeLazySlot(fn { x })
  ? y
  # value: <Promise>
  ? bind x := 2
  ? y
  # value: 2
