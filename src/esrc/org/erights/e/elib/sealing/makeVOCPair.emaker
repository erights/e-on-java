#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2004 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def makeVOCPair(brandName :String) :near {

    var myTempContents := def none {}

    def brand {
        to __printOn(out :TextWriter) :void {
            out.print(brandName)
        }
    }

    def ProveAuth {
        to __printOn(out :TextWriter) :void {
            out.print(`<$brandName prover>`)
        }
        to getBrand() :near { return brand }
        to coerce(specimen, optEjector) :near {
            def sealedBox {
                to getBrand() :near { return brand }
                to offerContent() :void {
                    myTempContents := specimen
                }
            }
            return sealedBox
        }
    }
    def CheckAuth {
        to __printOn(out :TextWriter) :void {
            out.print(`<$brandName checker template>`)
        }
        to getBrand() :near { return brand }
        match [`get`, authList :List] {
            def checker {
                to __printOn(out :TextWriter) :void {
                    out.print(`<$brandName checker>`)
                }
                to getBrand() :near { return brand }
                to coerce(specimenBox, optEjector) :any {
                    myTempContents := null
                    if (specimenBox.__respondsTo("offerContent", 0)) {
                        # XXX Using __respondsTo/2 here is a kludge
                        specimenBox.offerContent()
                    } else {
                        myTempContents := specimenBox
                    }
                    for auth in authList {
                        if (auth == myTempContents) {
                            return auth
                        }
                    }
                    myTempContents := none
                    throw.eject(optEjector,
                                `Unmatched $brandName authorization`)
                }
            }
        }
        match [`__respondsTo`, [`get`, _]] {
            true
        }
    }
    return [ProveAuth, CheckAuth]
}

    ? pragma.syntax("0.8")

    ? def [ProveAuth, CheckAuth] := <elib:sealing.makeVOCPair>("voc")
    # value: [<voc prover>, <voc checker template>]

    ? def f1 := <file:~/.bashrc>
    # value: <file:c:/Documents and Settings/millerm1/.bashrc>

    ? def f2 := <file:~/Desktop>
    # value: <file:c:/Documents and Settings/millerm1/Desktop/>

    ? def foo(f :CheckAuth[f1,f2]) :void {
    >     println(f.getPath())
    > }
    # value: <foo>

    ? foo(f1)
    # stdout: c:/Documents and Settings/millerm1/.bashrc

    ? def f3 := <file:~>
    # value: <file:c:/Documents and Settings/millerm1/>

    ? foo(f3)
    # problem: Unmatched voc authorization

    ? foo(f1 :ProveAuth)
    # stdout: c:/Documents and Settings/millerm1/.bashrc

    ? foo(f3 :ProveAuth)
    # problem: Unmatched voc authorization

    ? def bar(f) :void {
    >     println(f.getPath())
    > }
    # value: <bar>

    ? bar(f1)
    # stdout: c:/Documents and Settings/millerm1/.bashrc

    ? bar(f1 :ProveAuth)
    # problem: <NoSuchMethodException: <a sealedBox>.getPath/0>
