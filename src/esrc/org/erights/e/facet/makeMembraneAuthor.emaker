#!/usr/bin/env rune

# Copyright 2007 Hewlett-Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def map(func, list) {
    def result := [].diverge()
    for item in list {
        result.push(func(item))
    }
    return result.snapshot()
}

/**
 * The makeWeakKeyMap expected is the one from
 * &lt;unsafe:org.erights.e.elib.tables.makeWeakKeyMap&gt;
 */
def makeMembraneAuthor(makeWeakKeyMap) {
    def makeMembrane(target) {
        interface MyExempt guards MyExemptStamp {}
        var enabled := true
        def m := makeWeakKeyMap()
        def wrap(wrapped) {
            if (Ref.isData(wrapped)) {
                # Data provides only irrevocable knowledge, so don't
                # bother wrapping it.
                return wrapped
            } else if (wrapped =~ exempt :MyExempt) {
                # Being marked with MyExemptStamp allows it to pass
                return exempt
            } else if (m.fetch(wrapped, fn{null}) =~ wrapper :notNull) {
                # Reuse the wrapper with which I've already wrapped it
                return wrapper
            }
            def caretaker implements MyExemptStamp {
                match [verb , args] {
                    if (enabled) {
                        def wrappedArgs := map(wrap, args)
                        wrap(E.call(wrapped, verb, wrappedArgs))
                    } else {
                        throw("disabled")
                    }
                }
            }
            m[wrapped] := caretaker
            return caretaker
        }
        def gate {
            to enable() { enabled := true }
            to disable() { enabled := false }
        }
        return [wrap(target), gate]
    }
    return makeMembrane
}
