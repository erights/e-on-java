#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2005 Mark S. Miller, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def Slot := <type:org.erights.e.elib.slot.Slot>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>

def Shell := <type:org.eclipse.swt.widgets.Shell>
def Label := <type:org.eclipse.swt.widgets.Label>

def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()
def dndKitAuthor := <swttools:dndKitAuthor>

def makeLamportSlot := <elib:slot.makeLamportSlot>
def whenever := <elib:slot.whenever>
def logoURL := <resource:org/erights/e/icons/eye10.gif>

def <sky> := <import:com.skyhunter.*>

def <swt> := <import:org.eclipse.swt.*>
def SWT := <swt:makeSWT>
def SWT_DEFAULT := SWT.getDEFAULT()
def packUp(control) :boolean {
    def oldSize := control.getSize()
    def prefSize := control.computeSize(SWT_DEFAULT, SWT_DEFAULT, true)
    def width := oldSize.getX().max(prefSize.getX())
    def height := oldSize.getY().max(prefSize.getY())
    if (width == oldSize.getX() && height == oldSize.getY()) {
        return false
    } else {
        control.setSize(width, height)
        return true
    }
}

/**
 * Returns a watch, one of which is bound to swtWatch in the privilegedScope
 */
def watchAuthor(<swt>,
                currentDisplay,
                <file>,
                timer,
                introducer,
                makeSturdyRef) :any {

    def <widgets> := <swt:widgets.*>
    def <dnd> := <swt:dnd.*>
    def disposablesKit := <sky:swt.disposablesKitAuthor>(currentDisplay)
    def dndKit := dndKitAuthor(<dnd>,
                               currentDisplay,
                               <file>,
                               introducer,
                               makeSturdyRef)

    def watch {
        to run(slot :Slot) :Tuple[Shell, Label] {
            return watch(slot, "???", 2000)
        }
        to run(slot :Slot, varName :String) :Tuple[Shell, Label] {
            return watch(slot, varName, 2000)
        }
        to run(slot :Slot,
               varName :String,
               delayMillis :int) :Tuple[Shell, Label] {
            def reactor := makeLamportSlot.fromSlot(slot, timer, delayMillis)
            return watch.report(reactor.readOnly(), varName)
        }
        to report(reporter :EverReporter,
                  varName :String) :Tuple[Shell, Label] {
            def shell := <widgets:makeShell>(currentDisplay)
            shell.setText(`watching - $varName`)
            shell.setImage(disposablesKit.makeImage(logoURL))
            def label := <widgets:makeLabel>(shell, 0)
            swtGrid`$shell:$label`

            whenever([reporter], fn{
                if (!label.isDisposed()) {
                    label.setText(`${reporter.get()}`)
                    if (packUp(label)) {
                        packUp(shell)
                    }
                    label.redraw()
                }
            }, fn{ !label.isDisposed() && label.isVisible() })

            dndKit.makeDragSource(label, reporter)
            dndKit.makeDropTarget(label, reporter)
            label.setToolTipText(
                "Drag me, or right-click-copy me, to export as a URI.\n" +
                "Drop or right-click-paste a URI onto me, to set my value.")

            label.pack(true)
            shell.pack(true)
            shell.open()
            return [shell, label]
        }
    }
    return watch
}

? pragma.syntax("0.8")
? interp.waitAtTop(currentVat.morphInto("swt"))
? def &x := <elib:slot.makeLamportSlot>(3)
? swtWatch(&x, "x1")
? swtWatch.report(&x, "x2")
? def f := [].diverge()
? x := [f]
? f.push(3)
? x := x

