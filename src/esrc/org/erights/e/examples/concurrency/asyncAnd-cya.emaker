#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2003 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

/**
 * The <tt>asyncAnd</tt> function keeps track of the asynchronous
 * resolution of a list of promises-for-booleans, returning a promise that
 * resolves to the conjunction (and) of these.
 * <ul>
 * <li>It resolves to true if each and every promise in the list resolves to
 *     true.
 * <li>If false is seen, it resolves to false.
 * <li>If a broken promise is seen, it resolves to the broken promise.
 * </ul>
 * As with the logical and (<tt>&&</tt>) operator, it stops with the first
 * false and it resolves to false (though this does not stop the computations
 * that will resolve the other promises).
 *
 * @param boolVows A list of promises that resolve to boolean.
 * @return A promise that resolves to true if the entire list
 *         resolves to true; or to false or a broken promise if any resolve to
 *         false or broken.
 * @author Terry Stanley
 * @author Mark S. Miller
 */
def asynchAnd(boolVows :List[vow[boolean]]) :vow[boolean] {
    var countDown := boolVows.size()
    if (countDown == 0) { return true }

    # Since resolvers resolve only once, subsequent resolve messages fail
    # silently.
    def [result, resolver] := Ref.promise()

    for boolVow in boolVows {
        # During this turn each conjunctDone function is queued
        # to run in its own turn when its boolVow resolves.

        # using Ref.whenResolvedOnly directly because the catch/throw behavior
        # of the 'when' construct is undesirable. (Thanks to Kevin Reid for
        # the suggestion)
        Ref.whenResolvedOnly(boolVow, def conjunctDone(_) :void {
            if (Ref.isBroken(boolVow)) {
                resolver.resolve(boolVow, false)
            } else if (boolVow) {
                if ((countDown -= 1) <= 0) {
                    resolver.resolve(true)
                } else {
                    resolver.gettingCloser()
                }
            } else {
                resolver.resolve(false, false)
            }
        })
    }
    return result
}
