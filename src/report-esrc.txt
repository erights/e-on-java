[[[][..[]..][.[.][*.*.]][..[.][..].]][[[[]..........][...]][[[.]]][[[]...........[......].][...][[[...]][][...][.....][..][.......]][.[]......][[.....[[[]]].]][....][.....]]][[[[........]][[....]]]][[[[[............][........][..][..........][............][.........][[..]][..][....]][[..][.][
at <file:c:/Documents and Settings/millerm1/e/src/esrc/org/erights/e/elib/sealing/makeDFBrand.emaker#:span::1:0::1:0>
# warning: problem: <AuditFailedException: object expression e`def makeDFBrand implements DeepFrozen {
             
             method run(label :String) :any {
                 escape __return {
                     def key {
                     }
                     (def [BoxGuard, BoxStamp] := {
                         __makeProtocolDesc.makePair("", meta.context().getFQNPrefix().add("BoxGuard__T"), __makeList.run(), __makeList.run(), __makeList.run())
                     }).get(0)
                     def brand implements DeepFrozen {
                         
                         method __printOn(out :TextWriter) :void {
                             escape __return {
                                 out.print(label)
                                 null
                             }
                         }
                     }
                     def sealer implements DeepFrozen {
                         
                         method __printOn(out :TextWriter) :void {
                             escape __return {
                                 out.print("<", brand, " sealer>")
                                 null
                             }
                         }
                         
                         /** Return the Brand of this sealer/unsealer set. */
                         method getBrand() :any {
                             escape __return {
                                 __return.run(brand)
                                 null
                             }
                         }
                         
                         method seal(content) :any {
                             escape __return {
                                 def sealedBox implements BoxStamp {
                                     
                                     method __printOn(out :TextWriter) :void {
                                         escape __return {
                                             out.print("<sealed by ", brand, ">")
                                             null
                                         }
                                     }
                                     
                                     /**
                                      * Return the Brand of the Unsealer which can unseal
                                      * this box.
                                      */
                                     method getBrand() :any {
                                         escape __return {
                                             __return.run(brand)
                                             null
                                         }
                                     }
                                     
                                     /** An implementation detail. */
                                     method _offerContent(k) :any {
                                         escape __return {
                                             require.run(__equalizer.sameEver(key, k), def _ {
                                                 
                                                 method run() {
                                                     simple__quasiParser.valueMaker("Can't unseal - wrong key").substitute(__makeList.run())
                                                 }
                                             })
                                             __return.run(content)
                                             null
                                         }
                                     }
                                 }
                                 __return.run(sealedBox)
                                 null
                             }
                         }
                     }
                     def unsealer implements DeepFrozen {
                         
                         method __printOn(out :TextWriter) :void {
                             escape __return {
                                 out.print("<", brand, " unsealer>")
                                 null
                             }
                         }
                         
                         /** Return the Brand of this sealer/unsealer set. */
                         method getBrand() :any {
                             escape __return {
                                 __return.run(brand)
                                 null
                             }
                         }
                         
                         /** .unseal(specimen, null) */
                         method unseal(specimen) :any {
                             escape __return {
                                 __return.run(unsealer.unseal(specimen, null))
                                 null
                             }
                         }
                         
                         /**
                          * Unseal a SealedBox: return its contents.
                          *
                          * Coerces specimen by BoxGuard (giving a wrapping specimen the
                          * opportunity to __conformTo(BoxGuard)). If this succeeds, ask
                          * the resulting SealedBox of our Brand to _offerContent(key).
                          *
                          * Note that an object which successfully unseals will not
                          * necessarily give the same contents on a second unsealing
                          * because it might __conformTo differently.
                          */
                         method unseal(specimen, optEjector) :any {
                             escape __return {
                                 def box :BoxGuard exit optEjector := specimen
                                 __return.run(box._offerContent(key))
                                 null
                             }
                         }
                     }
                     def brandKit implements DeepFrozen {
                         
                         method __printOn(out :TextWriter) :void {
                             escape __return {
                                 out.print("<", brand, " brand kit>")
                                 null
                             }
                         }
                         
                         method getSealer() :any {
                             escape __return {
                                 __return.run(sealer)
                                 null
                             }
                         }
                         
                         method getUnsealer() :any {
                             escape __return {
                                 __return.run(unsealer)
                                 null
                             }
                         }
                         
                         /** Return the Brand of this sealer/unsealer set. */
                         method getBrand() :any {
                             escape __return {
                                 __return.run(brand)
                                 null
                             }
                         }
                         
                         /**
                          * This brand kit will coerce to a tuple, so that it may be
                          * matched against a list pattern like epatt`[sealer, unsealer]`.
                          */
                         method __conformTo(guard) :any {
                             escape __return {
                                 {
                                     def specimen__1 := guard
                                     escape ej__5 {
                                         def via (__is.run(type__uriGetter.get("org.erights.e.elib.tables.ConstList"))) _ exit ej__5 := specimen__1
                                         __return.run(__makeList.run(sealer, unsealer))
                                     } catch _ {
                                         escape ej__3 {
                                             def _ exit ej__3 := specimen__1
                                             __return.run(brandKit)
                                         } catch _ {
                                             throw.run("no match: ".add(specimen__1))
                                         }
                                     }
                                 }
                                 null
                             }
                         }
                     }
                     __return.run(brandKit)
                     null
                 }
             }
         }` failed audit by DeepFrozen> from: <file:c:/Documents and Settings/millerm1/e/src/esrc/org/erights/e/elib/sealing/makeDFBrand.emaker#:span::1:0::1:0>

..][..........][.....][.[....].]][[....]][[
# warning: duplicate header from: <file:c:/Documents and Settings/millerm1/e/src/esrc/org/erights/e/extern/persist/initTimeMachine.emaker#:span::25:19::25:37>

.....]][........][.[.][.....]][[......][.......][......][..][...][.][....][.][.......]][[...][.......]]][[...]]][[.][..][..]]][.[....]......
# warning: Missing copyright notice from: <file:c:/Documents and Settings/millerm1/e/src/esrc/scripts/cipher-saber.e#:span::2:0::2:0>

.....[[...........][..][...][...][...][...]].............................
# warning: duplicate header from: <file:c:/Documents and Settings/millerm1/e/src/esrc/scripts/srccheck.e#:span::100:18::100:36>


# warning: duplicate version from: <file:c:/Documents and Settings/millerm1/e/src/esrc/scripts/srccheck.e#:span::45:48::45:60>

...[..[....].
# warning: Missing copyright notice from: <file:c:/Documents and Settings/millerm1/e/src/esrc/scripts/test/jcombothread.e-awt#:span::2:0::2:0>

..
# warning: Missing copyright notice from: <file:c:/Documents and Settings/millerm1/e/src/esrc/scripts/test/methcall.e#:span::2:0::2:0>

...[.....]]..[.*.*.*..].]]