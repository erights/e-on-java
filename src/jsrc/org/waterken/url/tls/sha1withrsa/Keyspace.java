// Copyright 2004-2005 Waterken Inc. under the terms of the MIT X license
// found at http://www.opensource.org/licenses/mit-license.html
package org.waterken.url.tls.sha1withrsa;

import org.waterken.uri.Base32;
import org.waterken.url.tls.Host;
import org.waterken.url.tls.KeyManager;

import java.io.ByteArrayInputStream;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;

/**
 * The <code>SHA1withRSA</code> cryptosystem.
 */
public final class Keyspace
  implements org.waterken.url.tls.Keyspace, java.io.Serializable {

    static private final long serialVersionUID = -782210701246932394L;

    /**
     * A prototype self-signed certificate.
     */
    static private final byte[] prototype = new byte[]{(byte)0x30,
      (byte)0x82,
      (byte)0x02,
      (byte)0x40,
      (byte)0x30,
      (byte)0x82,
      (byte)0x01,
      (byte)0xA9,
      (byte)0x02,
      (byte)0x04,
      (byte)0x41,
      (byte)0x18,
      (byte)0xD6,
      (byte)0xE0,
      (byte)0x30,
      (byte)0x0D,
      (byte)0x06,
      (byte)0x09,
      (byte)0x2A,
      (byte)0x86,
      (byte)0x48,
      (byte)0x86,
      (byte)0xF7,
      (byte)0x0D,
      (byte)0x01,
      (byte)0x01,
      (byte)0x05,
      (byte)0x05,
      (byte)0x00,
      (byte)0x30,
      (byte)0x67,
      (byte)0x31,
      (byte)0x0B,
      (byte)0x30,
      (byte)0x09,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x06,
      (byte)0x13,
      (byte)0x02,
      (byte)0x41,
      (byte)0x49,
      (byte)0x31,
      (byte)0x12,
      (byte)0x30,
      (byte)0x10,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x08,
      (byte)0x13,
      (byte)0x09,
      (byte)0x53,
      (byte)0x68,
      (byte)0x6F,
      (byte)0x61,
      (byte)0x6C,
      (byte)0x20,
      (byte)0x42,
      (byte)0x61,
      (byte)0x79,
      (byte)0x31,
      (byte)0x12,
      (byte)0x30,
      (byte)0x10,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x07,
      (byte)0x13,
      (byte)0x09,
      (byte)0x44,
      (byte)0x61,
      (byte)0x74,
      (byte)0x61,
      (byte)0x20,
      (byte)0x44,
      (byte)0x6F,
      (byte)0x6D,
      (byte)0x65,
      (byte)0x31,
      (byte)0x0D,
      (byte)0x30,
      (byte)0x0B,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x0A,
      (byte)0x13,
      (byte)0x04,
      (byte)0x73,
      (byte)0x65,
      (byte)0x6C,
      (byte)0x66,
      (byte)0x31,
      (byte)0x0D,
      (byte)0x30,
      (byte)0x0B,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x0B,
      (byte)0x13,
      (byte)0x04,
      (byte)0x79,
      (byte)0x75,
      (byte)0x72,
      (byte)0x6C,
      (byte)0x31,
      (byte)0x12,
      (byte)0x30,
      (byte)0x10,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x03,
      (byte)0x13,
      (byte)0x09,
      (byte)0x6C,
      (byte)0x6F,
      (byte)0x63,
      (byte)0x61,
      (byte)0x6C,
      (byte)0x68,
      (byte)0x6F,
      (byte)0x73,
      (byte)0x74,
      (byte)0x30,
      (byte)0x1E,
      (byte)0x17,
      (byte)0x0D,
      (byte)0x30,
      (byte)0x34,
      (byte)0x30,
      (byte)0x38,
      (byte)0x31,
      (byte)0x30,
      (byte)0x31,
      (byte)0x34,
      (byte)0x30,
      (byte)0x38,
      (byte)0x33,
      (byte)0x32,
      (byte)0x5A,
      (byte)0x17,
      (byte)0x0D,
      (byte)0x34,
      (byte)0x38,
      (byte)0x30,
      (byte)0x37,
      (byte)0x30,
      (byte)0x35,
      (byte)0x30,
      (byte)0x37,
      (byte)0x34,
      (byte)0x30,
      (byte)0x31,
      (byte)0x36,
      (byte)0x5A,
      (byte)0x30,
      (byte)0x67,
      (byte)0x31,
      (byte)0x0B,
      (byte)0x30,
      (byte)0x09,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x06,
      (byte)0x13,
      (byte)0x02,
      (byte)0x41,
      (byte)0x49,
      (byte)0x31,
      (byte)0x12,
      (byte)0x30,
      (byte)0x10,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x08,
      (byte)0x13,
      (byte)0x09,
      (byte)0x53,
      (byte)0x68,
      (byte)0x6F,
      (byte)0x61,
      (byte)0x6C,
      (byte)0x20,
      (byte)0x42,
      (byte)0x61,
      (byte)0x79,
      (byte)0x31,
      (byte)0x12,
      (byte)0x30,
      (byte)0x10,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x07,
      (byte)0x13,
      (byte)0x09,
      (byte)0x44,
      (byte)0x61,
      (byte)0x74,
      (byte)0x61,
      (byte)0x20,
      (byte)0x44,
      (byte)0x6F,
      (byte)0x6D,
      (byte)0x65,
      (byte)0x31,
      (byte)0x0D,
      (byte)0x30,
      (byte)0x0B,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x0A,
      (byte)0x13,
      (byte)0x04,
      (byte)0x73,
      (byte)0x65,
      (byte)0x6C,
      (byte)0x66,
      (byte)0x31,
      (byte)0x0D,
      (byte)0x30,
      (byte)0x0B,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x0B,
      (byte)0x13,
      (byte)0x04,
      (byte)0x79,
      (byte)0x75,
      (byte)0x72,
      (byte)0x6C,
      (byte)0x31,
      (byte)0x12,
      (byte)0x30,
      (byte)0x10,
      (byte)0x06,
      (byte)0x03,
      (byte)0x55,
      (byte)0x04,
      (byte)0x03,
      (byte)0x13,
      (byte)0x09,
      (byte)0x6C,
      (byte)0x6F,
      (byte)0x63,
      (byte)0x61,
      (byte)0x6C,
      (byte)0x68,
      (byte)0x6F,
      (byte)0x73,
      (byte)0x74,
      (byte)0x30,
      (byte)0x81,
      (byte)0x9F,
      (byte)0x30,
      (byte)0x0D,
      (byte)0x06,
      (byte)0x09,
      (byte)0x2A,
      (byte)0x86,
      (byte)0x48,
      (byte)0x86,
      (byte)0xF7,
      (byte)0x0D,
      (byte)0x01,
      (byte)0x01,
      (byte)0x01,
      (byte)0x05,
      (byte)0x00,
      (byte)0x03,
      (byte)0x81,
      (byte)0x8D,
      (byte)0x00,
      (byte)0x30,
      (byte)0x81,
      (byte)0x89,
      (byte)0x02,
      (byte)0x81,
      (byte)0x81,
      (byte)0x00,
      (byte)0xBE,
      (byte)0x11,
      (byte)0x1F,
      (byte)0xA8,
      (byte)0xED,
      (byte)0x61,
      (byte)0x26,
      (byte)0xD9,
      (byte)0xFA,
      (byte)0x38,
      (byte)0xA7,
      (byte)0xA5,
      (byte)0xB3,
      (byte)0x83,
      (byte)0x8C,
      (byte)0x60,
      (byte)0x0B,
      (byte)0x4F,
      (byte)0x71,
      (byte)0x44,
      (byte)0x31,
      (byte)0xB7,
      (byte)0xF8,
      (byte)0x6E,
      (byte)0xE3,
      (byte)0x1A,
      (byte)0x4F,
      (byte)0x05,
      (byte)0x08,
      (byte)0xAB,
      (byte)0x23,
      (byte)0x41,
      (byte)0x91,
      (byte)0x72,
      (byte)0x5B,
      (byte)0xB3,
      (byte)0xE1,
      (byte)0x53,
      (byte)0x73,
      (byte)0xC9,
      (byte)0xB8,
      (byte)0x8F,
      (byte)0x59,
      (byte)0xDF,
      (byte)0x7F,
      (byte)0xE1,
      (byte)0x31,
      (byte)0x13,
      (byte)0x00,
      (byte)0xCA,
      (byte)0xB0,
      (byte)0xCD,
      (byte)0xB0,
      (byte)0x50,
      (byte)0xC4,
      (byte)0xE9,
      (byte)0x7A,
      (byte)0x2D,
      (byte)0xC1,
      (byte)0x9D,
      (byte)0x4D,
      (byte)0x00,
      (byte)0xF6,
      (byte)0x65,
      (byte)0x02,
      (byte)0xF1,
      (byte)0x49,
      (byte)0xFF,
      (byte)0x3E,
      (byte)0xBD,
      (byte)0x0C,
      (byte)0x70,
      (byte)0x89,
      (byte)0x89,
      (byte)0x90,
      (byte)0x0B,
      (byte)0xC5,
      (byte)0x57,
      (byte)0xA2,
      (byte)0x62,
      (byte)0xD3,
      (byte)0xB1,
      (byte)0xC0,
      (byte)0xD7,
      (byte)0x45,
      (byte)0x5D,
      (byte)0x99,
      (byte)0xDC,
      (byte)0xBE,
      (byte)0x08,
      (byte)0x94,
      (byte)0xFD,
      (byte)0xEE,
      (byte)0x8D,
      (byte)0xDD,
      (byte)0x4E,
      (byte)0x32,
      (byte)0x35,
      (byte)0xD5,
      (byte)0xFA,
      (byte)0x0E,
      (byte)0x30,
      (byte)0xC3,
      (byte)0x06,
      (byte)0xD6,
      (byte)0x17,
      (byte)0xBD,
      (byte)0xDC,
      (byte)0xA4,
      (byte)0x50,
      (byte)0xE5,
      (byte)0xFE,
      (byte)0xB9,
      (byte)0xED,
      (byte)0x62,
      (byte)0xE1,
      (byte)0xE6,
      (byte)0xC9,
      (byte)0x49,
      (byte)0x51,
      (byte)0x35,
      (byte)0x8B,
      (byte)0x7B,
      (byte)0x84,
      (byte)0x61,
      (byte)0x53,
      (byte)0xB0,
      (byte)0xE9,
      (byte)0x02,
      (byte)0x03,
      (byte)0x01,
      (byte)0x00,
      (byte)0x01,
      (byte)0x30,
      (byte)0x0D,
      (byte)0x06,
      (byte)0x09,
      (byte)0x2A,
      (byte)0x86,
      (byte)0x48,
      (byte)0x86,
      (byte)0xF7,
      (byte)0x0D,
      (byte)0x01,
      (byte)0x01,
      (byte)0x05,
      (byte)0x05,
      (byte)0x00,
      (byte)0x03,
      (byte)0x81,
      (byte)0x81,
      (byte)0x00,
      (byte)0x84,
      (byte)0x81,
      (byte)0x01,
      (byte)0x29,
      (byte)0xBD,
      (byte)0x80,
      (byte)0x5D,
      (byte)0x84,
      (byte)0xB1,
      (byte)0xC2,
      (byte)0x00,
      (byte)0x37,
      (byte)0xF7,
      (byte)0x95,
      (byte)0x8E,
      (byte)0xF8,
      (byte)0xE5,
      (byte)0x8E,
      (byte)0x9D,
      (byte)0x41,
      (byte)0x0D,
      (byte)0x73,
      (byte)0x18,
      (byte)0xC7,
      (byte)0x58,
      (byte)0xB7,
      (byte)0x66,
      (byte)0xE4,
      (byte)0x6F,
      (byte)0x40,
      (byte)0x1A,
      (byte)0xB5,
      (byte)0xE4,
      (byte)0x92,
      (byte)0x6F,
      (byte)0x90,
      (byte)0xCC,
      (byte)0x3C,
      (byte)0xD9,
      (byte)0x00,
      (byte)0xBA,
      (byte)0x36,
      (byte)0x09,
      (byte)0x15,
      (byte)0x47,
      (byte)0x2D,
      (byte)0xA3,
      (byte)0xF8,
      (byte)0x44,
      (byte)0x2C,
      (byte)0x86,
      (byte)0x14,
      (byte)0xCE,
      (byte)0x6B,
      (byte)0x57,
      (byte)0x70,
      (byte)0x53,
      (byte)0x94,
      (byte)0x81,
      (byte)0xEA,
      (byte)0x15,
      (byte)0x0F,
      (byte)0x6E,
      (byte)0x27,
      (byte)0x1C,
      (byte)0x43,
      (byte)0x07,
      (byte)0xC7,
      (byte)0x95,
      (byte)0x5F,
      (byte)0x06,
      (byte)0x8B,
      (byte)0x70,
      (byte)0xD3,
      (byte)0xD5,
      (byte)0x0D,
      (byte)0xD2,
      (byte)0xAD,
      (byte)0x52,
      (byte)0xED,
      (byte)0xC7,
      (byte)0x2A,
      (byte)0x26,
      (byte)0xBC,
      (byte)0xF7,
      (byte)0x2F,
      (byte)0x5E,
      (byte)0xE2,
      (byte)0xD0,
      (byte)0xD4,
      (byte)0xE3,
      (byte)0xF7,
      (byte)0x93,
      (byte)0x52,
      (byte)0x23,
      (byte)0x4E,
      (byte)0x2A,
      (byte)0xD9,
      (byte)0x00,
      (byte)0x96,
      (byte)0x79,
      (byte)0x53,
      (byte)0x56,
      (byte)0x52,
      (byte)0x6F,
      (byte)0x34,
      (byte)0x3E,
      (byte)0x04,
      (byte)0x0C,
      (byte)0x48,
      (byte)0x46,
      (byte)0xFC,
      (byte)0xE8,
      (byte)0x40,
      (byte)0xD0,
      (byte)0xF9,
      (byte)0x2C,
      (byte)0x75,
      (byte)0x72,
      (byte)0x85,
      (byte)0x0E,
      (byte)0x44,
      (byte)0x43,
      (byte)0x36,
      (byte)0xA3,
      (byte)0x2D,
      (byte)0xAF,
      (byte)0x75};

    /**
     * The start of the encoded TBS certificate in the prototype certificate.
     */
    static private final int begin_tbs = 4;

    /**
     * The length of the encoded TBS certificate.
     */
    static private final int tbs_length = 429;

    /**
     * The start of the encoded public key in the prototype certificate.
     */
    static private final int begin_key_value = 271;

    /**
     * The length of the encoded public key.
     */
    static private final int key_value_length = 162;

    /**
     * The start of the encoded signature in the prototype certificate.
     */
    static private final int begin_signature = 452;

    /**
     * The length of the encoded signature.
     */
    static private final int signature_length = 128;

    private Keyspace() {
    }

    /**
     * The instance.
     */
    static private final Keyspace INSTANCE = new Keyspace();

    /**
     * Constructs a <code>Keyspace</code>.
     */
    static public org.waterken.url.tls.Keyspace make() {
        return INSTANCE;
    }

    // org.waterken.url.tls.Keyspace interface.

    /**
     * The acceptable ciphersuites.
     */
    static private final String[] ACCEPTABLE = new String[]{
      "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
      "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
      "TLS_RSA_WITH_AES_128_CBC_SHA",
      "SSL_RSA_WITH_RC4_128_SHA",
      "SSL_RSA_WITH_3DES_EDE_CBC_SHA"};

    public String[] getAcceptable() {
        return (String[])ACCEPTABLE.clone();
    }

    public KeyPair create(SecureRandom entropy)
      throws NoSuchAlgorithmException {
        final KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
        generator.initialize(1024, entropy);
        return generator.generateKeyPair();
    }

    public String identify(final PublicKey key)
      throws NoSuchAlgorithmException {
        final MessageDigest hash = MessageDigest.getInstance("SHA-1");
        return Base32.encode(hash.digest(((RSAPublicKey)key).getEncoded()));
    }

    public Certificate certify(final KeyPair identity) throws
      CertificateException, NoSuchAlgorithmException, InvalidKeyException,
      SignatureException {
        // Clone the prototype certificate.
        final byte[] certificate = new byte[prototype.length];
        System.arraycopy(prototype, 0, certificate, 0, certificate.length);

        // Overwrite the public key.
        final byte[] key_value =
          ((RSAPublicKey)identity.getPublic()).getEncoded();
        if (key_value_length != key_value.length) {
            throw new IllegalArgumentException("Wrong key size!");
        }
        System.arraycopy(key_value,
                         0,
                         certificate,
                         begin_key_value,
                         key_value_length);

        // Overwrite the signature value.
        final Signature alg = Signature.getInstance("SHA1withRSA");
        alg.initSign(((RSAPrivateKey)identity.getPrivate()));
        alg.update(certificate, begin_tbs, tbs_length);
        final byte[] signature = alg.sign();
        if (signature_length != signature.length) {
            throw new IllegalStateException("Wrong signature length!");
        }
        System.arraycopy(signature,
                         0,
                         certificate,
                         begin_signature,
                         signature_length);

        // Decode the new certificate.
        final CertificateFactory factory =
          CertificateFactory.getInstance("X.509");
        return factory.generateCertificate(new ByteArrayInputStream(certificate));
    }

    public Host become(final KeyPair identity) throws CertificateException,
      NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        return new Host(this,
                        identify(identity.getPublic()),
                        new javax.net.ssl.KeyManager[]{KeyManager.make(identity.getPrivate(),
                                                                       new X509Certificate[]{
                                                                         (X509Certificate)certify(
                                                                           identity)})});
    }
}
