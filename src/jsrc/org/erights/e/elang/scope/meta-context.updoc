#!/usr/bin/env rune

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

? pragma.syntax("0.8")
? interp.setExpand(true)

? def foo() :any { return [meta.getState(),meta.context()] }
# expansion: def foo {
#
#                method run() :any {
#                    escape __return {
#                        __return.run(__makeList.run(meta.getState(), meta.context()))
#                    }
#                }
#            }

# value: <foo>

? def [s,c] := foo()
# expansion: def [s, c] := foo.run()

# value: [["&__makeList" => <& <makeConstList>>, \
#          "&any" => <& any>, \
#          "&__return" => <& <__return: disabled Ejector>>], \
#         <static __main$foo$, 3 s>]

? c.getSource()
# expansion: c.getSource()

# value: e`def foo {
#
#            method run() :any {
#                escape __return {
#                    __return.run(__makeList.run(meta.getState(), meta.context()))
#                }
#            }
#        }`

? c.getSynEnv()
# expansion: c.getSynEnv()

# value: ["__makeList" => epatt`__makeList`, \
#         "any" => epatt`any`, \
#         "__return" => epatt`__return`]

? c.getSource().getSynEnv()
# expansion: c.getSource().getSynEnv()

# value: ["__makeList" => epatt`__makeList`, "any" => epatt`any`]

? c.getFQNPrefix()
# expansion: c.getFQNPrefix()

# value: "__main$foo$"
