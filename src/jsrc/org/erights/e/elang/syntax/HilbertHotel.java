package org.erights.e.elang.syntax;



// Copyright 2002 Combex, Inc. under the terms of the MIT X license
// found at http://www.opensource.org/licenses/mit-license.html ...............


/**
 * Both generates temporary variable names, and deterministically transforms
 * valid names into names guaranteed not to conflict with generated names.
 * Since generated names are valid names, how can it do both?
 *
 * It is said that Hilbert, when teaching students about infinity, would
 * tell a tale that has become known as the Hilbert Hotel. <p>
 *
 * Let's say you drive up to a hotel that says "Aleph-null rooms, no
 * vacancies". You walk in and say "I'd like a room". The manager says
 * "Can't you read?  No vacancies."  You say, "No problem, take the
 * person in room 0 and put him in room 1. Take the person in room 1 and
 * put him in room 2. Etc... Then, put me in room 0. <p>
 *
 * Later, a bus with an aleph-null number of passengers drive up. The
 * driver walks in and asks for a room for each of his passengers.
 * "What?"  "No problem. Move the person in room number 1 to room number
 * 2, the person in number 2 to number 4, number 3 to number 6, etc. Now
 * give my passengers the odd numbered rooms." <p>
 *
 * @author Mark S. Miller
 */
public class HilbertHotel {

    /**
     * The reserved separator is "__".
     *
     * @see <a href=
     * "https://bugs.sieve.net/bugs/?func=detailbug&bug_id=125620&group_id=16380"
     * >Overzealous HilbertHotel - non-idempotent expansion</a>
     */
    static private final String SEP = "__";
    static private final int SEP_SIZE = SEP.length();

    /**
     * generated temp variable count
     */
    private int myTempCount = 0;

    /**
     *
     */
    public HilbertHotel() {
    }

    /**
     * generate 'unique' temporary variable names for transformations.
     * <p>
     * Suffix will be odd to make room for the new guests at the Hilbert
     * Hotel. See rename().
     */
    public String newTemp(String name) {
        return baseName(name) + SEP + (myTempCount++ * 2 + 1);
    }

    /**
     * If 'name' ends in "__"<digits>, return the index of "__".
     * <p>
     * This is the format of a temp name. Otherwise, return -1.
     */
    static private int tempSep(String name) {
        int lastSEP = name.lastIndexOf(SEP);
        if (lastSEP == -1) {
            return -1;
        }
        int len = name.length();
        if (lastSEP == len - SEP_SIZE) {
            //ends with "__"
            return -1;
        }
        for (int j = lastSEP + SEP_SIZE; j < len; j++) {
            if (!Character.isDigit(name.charAt(j))) {
                return -1;
            }
        }
        return lastSEP;
    }

    /**
     * If 'name' could have been generated by 'newTemp(base)', return
     * 'base'.
     * <p>
     * Otherwise, return 'name'. This is our sort-of demangler.
     */
    static public String baseName(String name) {
        int i = tempSep(name);
        if (i == -1) {
            return name;
        } else {
            return name.substring(0, i);
        }
    }

    /**
     * Even if given an ident that could have been generated by newTemp() or
     * rename(), rename() will return names guaranteed not to conflict with
     * each other.
     * <p>
     * The argument to rename() is the room assignment before the bus
     * drives up. rename() returns the resulting assignment.
     * <p>
     * Since this transformation is deterministic, rename() is a static
     * method.
     */
    static public String rename(String name) {
        int i = tempSep(name);
        if (i == -1) {
            return name;
        }
        String base = name.substring(0, i);
        int suffix = Integer.parseInt(name.substring(i + SEP_SIZE));
        return base + SEP + (suffix * 2);
    }
}
