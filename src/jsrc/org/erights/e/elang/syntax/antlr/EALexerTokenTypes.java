// $ANTLR 2.7.5rc2 (2005-01-08): "elex.g" -> "EALexer.java"$

package org.erights.e.elang.syntax.antlr;

public interface EALexerTokenTypes {

    int EOF = 1;
    int NULL_TREE_LOOKAHEAD = 3;
    int QUASIOPEN = 4;
    int QUASICLOSE = 5;
    int QUASIBODY = 6;
    int QuasiContent = 7;
    int RCURLY = 8;
    int DOLLARHOLE = 9;
    int ATHOLE = 10;
    int DOLLARCURLY = 11;
    int ATCURLY = 12;
    int DOLLARESC = 13;
    int AssignExpr = 14;
    int CallExpr = 15;
    int IntoExpr = 16;
    int EscapeExpr = 17;
    int HideExpr = 18;
    int IfExpr = 19;
    int ForExpr = 20;
    int WhenExpr = 21;
    int AndExpr = 22;
    int OrExpr = 23;
    int CoerceExpr = 24;
    int LiteralExpr = 25;
    int MatchBindExpr = 26;
    int NounExpr = 27;
    int ObjectExpr = 28;
    int InterfaceExpr = 29;
    int QuasiLiteralExpr = 30;
    int QuasiPatternExpr = 31;
    int MetaStateExpr = 32;
    int MetaContextExpr = 33;
    int SeqExpr = 34;
    int SlotExpr = 35;
    int MetaExpr = 36;
    int CatchExpr = 37;
    int FinallyExpr = 38;
    int ReturnExpr = 39;
    int ContinueExpr = 40;
    int BreakExpr = 41;
    int WhileExpr = 42;
    int SwitchExpr = 43;
    int TryExpr = 44;
    int MapPattern = 45;
    int LiteralPattern = 46;
    int TupleExpr = 47;
    int MapExpr = 48;
    int BindPattern = 49;
    int SendExpr = 50;
    int CurryExpr = 51;
    int FinalPattern = 52;
    int VarPattern = 53;
    int SlotPattern = 54;
    int ListPattern = 55;
    int CdrPattern = 56;
    int IgnorePattern = 57;
    int SuchThatPattern = 58;
    int QuasiLiteralPattern = 59;
    int QuasiPatternPattern = 60;
    int URI = 61;
    int URIStart = 62;
    int URIGetter = 63;
    int URIExpr = 64;
    int LambdaExpr = 65;
    int EScript = 66;
    int EMethod = 67;
    int EMatcher = 68;
    int List = 69;
    int WhenFn = 70;
    int HEX = 71;
    int OCTAL = 72;
    int WS = 73;
    int LINESEP = 74;
    int SL_COMMENT = 75;
    int DOC_COMMENT = 76;
    int CHAR_LITERAL = 77;
    int STRING = 78;
    int ESC = 79;
    int HEX_DIGIT = 80;
    int IDENT = 81;
    int INT = 82;
    int POSINT = 83;
    int FLOAT64 = 84;
    int EXPONENT = 85;
    // ";" = 86
    int LITERAL_pragma = 87;
    // "." = 88
    int LITERAL_meta = 89;
    int LITERAL_if = 90;
    int LITERAL_else = 91;
    int LITERAL_for = 92;
    int LITERAL_in = 93;
    // "=>" = 94
    int LITERAL_accum = 95;
    int LITERAL_while = 96;
    // "{" = 97
    int LITERAL__ = 98;
    // "+" = 99
    // "*" = 100
    // "&" = 101
    // "|" = 102
    int LITERAL_when = 103;
    // "->" = 104
    int LITERAL_finally = 105;
    // ":" = 106
    int LITERAL_escape = 107;
    int LITERAL_thunk = 108;
    int LITERAL_fn = 109;
    int LITERAL_switch = 110;
    int LITERAL_try = 111;
    int LITERAL_bind = 112;
    int LITERAL_var = 113;
    int LITERAL_def = 114;
    // ":=" = 115
    // "(" = 116
    // "," = 117
    // ")" = 118
    int LITERAL_extends = 119;
    int LITERAL_implements = 120;
    int LITERAL_to = 121;
    int LITERAL_method = 122;
    int LITERAL_on = 123;
    int LITERAL_match = 124;
    int LITERAL_throws = 125;
    int LITERAL_interface = 126;
    int LITERAL_guards = 127;
    // "=" = 128
    // "//=" = 129
    // "+=" = 130
    // "-=" = 131
    // "*=" = 132
    // "/=" = 133
    // "%=" = 134
    // "%%=" = 135
    // "**=" = 136
    // ">>=" = 137
    // "<<=" = 138
    // "&=" = 139
    // "^=" = 140
    // "|=" = 141
    int LITERAL_break = 142;
    int LITERAL_continue = 143;
    int LITERAL_return = 144;
    // "^" = 145
    // "||" = 146
    // "&&" = 147
    // "==" = 148
    // "!=" = 149
    // "&!" = 150
    // "=~" = 151
    // "!~" = 152
    // "<" = 153
    // "<=" = 154
    // "<=>" = 155
    // ">=" = 156
    // ">" = 157
    // ".." = 158
    // "..!" = 159
    // "<<" = 160
    // ">>" = 161
    // "-" = 162
    // "/" = 163
    // "//" = 164
    // "%" = 165
    // "%%" = 166
    // "**" = 167
    // "!" = 168
    // "~" = 169
    // "[" = 170
    // "]" = 171
    // "<-" = 172
    // "::" = 173
    int LITERAL_catch = 174;
    // "?" = 175
    // "${" = 176
    // "$" = 177
    // "$$" = 178
    // "@{" = 179
    // "@" = 180
    int LITERAL_abstract = 181;
    int LITERAL_an = 182;
    int LITERAL_as = 183;
    int LITERAL_assert = 184;
    int LITERAL_attribute = 185;
    int LITERAL_be = 186;
    int LITERAL_begin = 187;
    int LITERAL_behalf = 188;
    int LITERAL_belief = 189;
    int LITERAL_believe = 190;
    int LITERAL_believes = 191;
    int LITERAL_case = 192;
    int LITERAL_class = 193;
    int LITERAL_const = 194;
    int LITERAL_constructor = 195;
    int LITERAL_datatype = 196;
    int LITERAL_declare = 197;
    int LITERAL_default = 198;
    int LITERAL_define = 199;
    int LITERAL_defmacro = 200;
    int LITERAL_delicate = 201;
    int LITERAL_deprecated = 202;
    int LITERAL_dispatch = 203;
    int LITERAL_do = 204;
    int LITERAL_encapsulate = 205;
    int LITERAL_encapsulated = 206;
    int LITERAL_encapsulates = 207;
    int LITERAL_end = 208;
    int LITERAL_ensure = 209;
    int LITERAL_enum = 210;
    int LITERAL_eventual = 211;
    int LITERAL_eventually = 212;
    int LITERAL_export = 213;
    int LITERAL_facet = 214;
    int LITERAL_forall = 215;
    int LITERAL_fun = 216;
    int LITERAL_function = 217;
    int LITERAL_given = 218;
    int LITERAL_hidden = 219;
    int LITERAL_hides = 220;
    int LITERAL_inline = 221;
    int LITERAL_know = 222;
    int LITERAL_knows = 223;
    int LITERAL_lambda = 224;
    int LITERAL_let = 225;
    int LITERAL_methods = 226;
    int LITERAL_namespace = 227;
    int LITERAL_native = 228;
    int LITERAL_obeys = 229;
    int LITERAL_octet = 230;
    int LITERAL_oneway = 231;
    int LITERAL_operator = 232;
    int LITERAL_package = 233;
    int LITERAL_private = 234;
    int LITERAL_protected = 235;
    int LITERAL_public = 236;
    int LITERAL_raises = 237;
    int LITERAL_reliance = 238;
    int LITERAL_reliant = 239;
    int LITERAL_relies = 240;
    int LITERAL_rely = 241;
    int LITERAL_reveal = 242;
    int LITERAL_sake = 243;
    int LITERAL_signed = 244;
    int LITERAL_static = 245;
    int LITERAL_struct = 246;
    int LITERAL_suchthat = 247;
    int LITERAL_supports = 248;
    int LITERAL_suspect = 249;
    int LITERAL_suspects = 250;
    int LITERAL_synchronized = 251;
    int LITERAL_this = 252;
    int LITERAL_transient = 253;
    int LITERAL_truncatable = 254;
    int LITERAL_typedef = 255;
    int LITERAL_unsigned = 256;
    int LITERAL_unum = 257;
    int LITERAL_uses = 258;
    int LITERAL_using = 259;
    // "utf8" = 260
    // "utf16" = 261
    int LITERAL_virtual = 262;
    int LITERAL_volatile = 263;
    int LITERAL_wstring = 264;
    int SR = 265;
    int GE = 266;
    int SR_ASSIGN = 267;
    int LPAREN = 268;
    int RPAREN = 269;
    int LBRACK = 270;
    int RBRACK = 271;
    int LCURLY = 272;
    int AT = 273;
    int QUESTION = 274;
    int COLON = 275;
    int COMMA = 276;
    int DOT = 277;
    int THRU = 278;
    int TILL = 279;
    int SAME = 280;
    int EQ = 281;
    int LNOT = 282;
    int BNOT = 283;
    int NOTSAME = 284;
    int DIV = 285;
    int FLOORDIV = 286;
    int PLUS = 287;
    int MINUS = 288;
    int INC = 289;
    int DEC = 290;
    int STAR = 291;
    int REM = 292;
    int MOD = 293;
    int SL = 294;
    int LE = 295;
    int ABA = 296;
    int BXOR = 297;
    int BOR = 298;
    int LOR = 299;
    int BAND = 300;
    int BUTNOT = 301;
    int LAND = 302;
    int SEMI = 303;
    int POW = 304;
    int ASSIGN = 305;
    int FLOORDIV_ASSIGN = 306;
    int DIV_ASSIGN = 307;
    int PLUS_ASSIGN = 308;
    int MINUS_ASSIGN = 309;
    int STAR_ASSIGN = 310;
    int REM_ASSIGN = 311;
    int MOD_ASSIGN = 312;
    int POW_ASSIGN = 313;
    int SL_ASSIGN = 314;
    int BXOR_ASSIGN = 315;
    int BOR_ASSIGN = 316;
    int BAND_ASSIGN = 317;
    int SEND = 318;
    int WHEN = 319;
    int MAPSTO = 320;
    int MATCHBIND = 321;
    int MISMATCH = 322;
    int SCOPE = 323;
    int SCOPESLOT = 324;
    int GT = 325;
    int LT = 326;
    int ESCWS = 327;
    int ANYWS = 328;
    int SKIPLINE = 329;
    int UPDOC = 330;
    int BR = 331;
    int EOL = 332;
}
