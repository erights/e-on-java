#!/usr/bin/env rune

# Copyright 2004 Hewlett Packard, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................


?? in new vat AliceVat

    ? pragma.syntax("0.8")

    ? var trace := ""
    # value: ""

    ? def refmon {
    >     to wrap(underlying) :any {
    >         trace += "+"
    >         def wrapper extends underlying {
    >             to handleSendAll(verb, args) :any {
    >                 trace += `$\n=$verb/${args.size()}`
    >                 return super.handleSendAll(verb, args)
    >             }
    >             to handleSendAllOnly(verb, args) :void {
    >                 trace += `.$verb/${args.size()}`
    >                 super.handleSendAllOnly(verb, args)
    >             }
    >         }
    >         return wrapper
    >     }
    > }
    # value: <refmon>

    ? introducer.setReferenceMonitor(refmon)
    ? introducer.onTheAir()
    # value: ["3DES_SDH_M2", "3DES_SDH_M"]

    ? var x := 3
    # value: 3

    ? def sr := makeSturdyRef.temp(&x)
    # value: <SturdyRef to <var 3>>

    ? <file:~/Desktop/x.cap>.setText(introducer.sturdyToURI(sr))

?? in new vat BobVat

    ? pragma.syntax("0.8")

    ? introducer.onTheAir()
    # value: ["3DES_SDH_M2", "3DES_SDH_M"]

    ? def sr := introducer.sturdyFromURI(<file:~/Desktop/x.cap>.getText())
    # value: <SturdyRef>

    ? def farSlot := sr.getRcvr()
    # value: <Remote Promise>

    ? def adder { to add(x,y):any { return x+y }}
    # value: <adder>

    ? interp.waitAtTop(farSlot <- put(adder))

?? in vat AliceVat

    ? trace
    # example value: "++++.run/1.run/1+.run/1+.run/1"

    ? x
    # value: <Far ref>

    ? def y := x <- add(3,5)
    # value: <Remote Promise>

    ? interp.waitAtTop(y)
    ? y
    # value: 8

    ? interp.waitAtTop(timer.whenPast(timer.now() + 5000, fn{}))

    ? trace
    # example value: "++++.run/1.run/1+.run/1+.run/1
    #                 =add/2+.__whenMoreResolved/1.__whenMoreResolved/1"

