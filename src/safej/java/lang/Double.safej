# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

class(safe,
      "java.lang.Double",
      sugaredBy("org.erights.e.meta.java.lang.DoubleSugar"),
      statics(method("getMAX_VALUE()"),
              method("getMIN_VALUE()"),
              method("getNEGATIVE_INFINITY()"),
              method("getNaN()"),
              method("getPOSITIVE_INFINITY()"),
              method("getTYPE()"),
              method("doubleToLongBits(double)"),
              method("doubleToRawLongBits(double)"),
              method("isInfinite(double)"),
              method("isNaN(double)"),
              method("longBitsToDouble(long)"),
              method("parseDouble(String)"),
              method("run(String)"),
              method("run(double)"),
              method("toString(double)"),
              method("valueOf(String)")),
      methods(method("aboveZero()"),
              method("abs()"),
              method("acos()"),
              method("add(double)"),
              method("approxDivide(double)"),
              method("asin()"),
              method("atLeastZero()"),
              method("atMostZero()"),
              method("atan()"),
              method("atan2(double)"),
              method("belowZero()"),
              method("ceil()"),
              method("cos()"),
              method("exp()"),
              method("floor()"),
              method("floorDivide(double)"),
              method("isInfinite()"),
              method("isNaN()"),
              method("isZero()"),
              method("log()"),
              method("max(double)"),
              method("min(double)"),
              method("mod(double)"),
              method("modPow(double, double)"),
              method("multiply(double)"),
              method("negate()"),
              method("next()"),
              method("pow(double)"),
              method("previous()"),
              method("remainder(double)"),
              method("round()"),
              method("sin()"),
              method("sqrt()"),
              method("subtract(double)"),
              method("tan()"),
              method("truncDivide(double)"),
              method("truncate()"),
              method(suppress,
                     "random()",
                     comment("Would provide non-determinism")),
              method(reject, "compareTo(Object)"),
              method(suppress,
                     "compareTo(Double)",
                     comment("treats NaN and -0.0 badly")),
              method(suppress,
                     "compareTo(Object o)",
                     comment("treats NaN and -0.0 badly"))))
