# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

class(safe,
      "java.math.BigInteger",
      sugaredBy("org.erights.e.meta.java.math.BigIntegerSugar"),
      statics(method("getONE()"),
              method("getZERO()"),
              method("run(String)"),
              method("run(String, int)"),
              method("run(byte[])"),
              method("run(int, Random)"),
              method("run(int, byte[])"),
              method("run(int, int, Random)"),
              method("valueOf(long)")),
      methods(method("abs()"),
              method("and(BigInteger)"),
              method("bitCount()"),
              method("bitLength()"),
              method("gcd(BigInteger)"),
              method("getLowestSetBit()"),
              method("modInverse(BigInteger)"),
              method("negate()"),
              method("not()"),
              method("or(BigInteger)"),
              method("shiftLeft(int)"),
              method("shiftRight(int)"),
              method("signum()"),
              method("toByteArray()"),
              method("toString(int)"),
              method("xor(BigInteger)"),
              method(suppress, "add(BigInteger)",       comment("to coerce")),
              method(suppress, "max(BigInteger)",       comment("to coerce")),
              method(suppress, "min(BigInteger)",       comment("to coerce")),
              method(suppress, "multiply(BigInteger)",  comment("to coerce")),
              method(suppress, "pow(int)",              comment("to coerce")),
              method(suppress, "remainder(BigInteger)", comment("to coerce")),
              method(suppress, "subtract(BigInteger)",  comment("to coerce")),
              method(suppress, "mod(BigInteger)",       comment("to coerce")),
              method(suppress,
                     "modPow(BigInteger, BigInteger)",
                     comment("to coerce")),
              method(suppress, "clearBit(int)", comment("Use i & ~(1<<n)")),
              method(suppress, "flipBit(int)",  comment("Use i ^ (1<<n)")),
              method(suppress, "setBit(int)",   comment("Use i | (1<<n)")),
              method(suppress,
                     "testBit(int)",
                     comment("Use (i & (1<<n)) != 0")),
              method(suppress,
                     "andNot(BigInteger)",
                     comment("Use butNot")),
              method(reject, "compareTo(Object)"),
              method(suppress,
                     "compareTo(BigInteger)",
                     comment("would conflict")),
              method(suppress,
                     "divide(BigInteger)",
                     comment("Use truncDivide")),
              method(suppress,
                     "divideAndRemainder(BigInteger)",
                     comment("Does truncDivide rather than floorDivide")),
              method(suppress,
                     "isProbablePrime(int)",
                     comment("Would provide access to non-determinism"))))
